{"version":3,"file":"index-DKnFtbnC.js","sources":["../../../frontend/src/assets/applogo.svg","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/authConfig.ts","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/menu/menu.tsx","../../../frontend/src/AuthContext.tsx","../../../frontend/src/pages/chat/SimpleModal.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/AuthHandler.tsx","../../../frontend/src/ChatWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"data:image/svg+xml,%3csvg%20font-size='120px'%20aria-hidden='true'%20aria-label='Chat%20logo'%20fill='rgba(115,%20118,%20225,%201)'%20class='___12fm75w%20f1w7gpdv%20fez10in%20fg4l7m0'%20role='img'%20width='1em'%20height='1em'%20viewBox='0%200%2020%2020'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M7.4%2012.8a1.04%201.04%200%200%200%201.59-.51l.45-1.37a2.34%202.34%200%200%201%201.47-1.48l1.4-.45A1.04%201.04%200%200%200%2012.25%207l-1.37-.45A2.34%202.34%200%200%201%209.4%205.08L8.95%203.7a1.03%201.03%200%200%200-.82-.68%201.04%201.04%200%200%200-1.15.7l-.46%201.4a2.34%202.34%200%200%201-1.44%201.45L3.7%207a1.04%201.04%200%200%200%20.02%201.97l1.37.45a2.33%202.33%200%200%201%201.48%201.48l.46%201.4c.07.2.2.37.38.5Zm6.14%204.05a.8.8%200%200%200%201.22-.4l.25-.76a1.09%201.09%200%200%201%20.68-.68l.77-.25a.8.8%200%200%200-.02-1.52l-.77-.25a1.08%201.08%200%200%201-.68-.68l-.25-.77a.8.8%200%200%200-1.52.01l-.24.76a1.1%201.1%200%200%201-.67.68l-.77.25a.8.8%200%200%200%200%201.52l.77.25a1.09%201.09%200%200%201%20.68.68l.25.77c.06.16.16.3.3.4Z'%20fill='rgba(115,%20118,%20225,%201)'%3e%3c/path%3e%3c/svg%3e\"","const BACKEND_URI = import.meta.env.VITE_BACKEND_URI || \"\";\nimport { getToken } from '../authConfig'; \nimport { msalInstance } from '../authConfig';\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse, HistoryListApiResponse, HistoryApiResponse } from \"./models\";\n\n/**\n * DjangoのCSRFトークンをクッキーから取得するためのヘルパー関数\n * @param name クッキー名（通常は 'csrftoken'）\n * @returns トークンの文字列、またはnull\n */\nfunction getCookie(name: string): string | null {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // 探している名前で始まるクッキーか？ (例: \"csrftoken=...\")\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport async function chatApi(request: ChatAppRequest, token: string | null): Promise<Response> {\n\n    const csrfToken = getCookie('csrftoken');\n    const headers = {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrfToken || '' ,\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    };\n\n    return await fetch('/api/chat/', {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: headers,\n        body: JSON.stringify(request)\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n\n// 保存する会話データの型を定義\ninterface ConversationData {\n    userId: string;\n    conversationId: string;\n    question: string;\n    answer: ChatAppResponse;\n    tenantId?: string | null;\n    historyBoxId?: string;\n}\n\n/**\n * 会話履歴をバックエンドAPI経由でCosmos DBに保存する関数\n * @param data 保存するデータ\n * @param token 認証トークン\n */\nexport async function saveConversationToDb(data: ConversationData, token: string | undefined): Promise<void> {\n    // バックエンドに作成したAPIエンドポイントのURL\n    const apiEndpoint = `/api/history/`;\n\n    // 認証トークンがない場合は処理を中断\n    if (!token) {\n        console.warn(\"No token available. Skipping save to DB.\");\n        return;\n    }\n\n    try {\n        const response = await fetch(apiEndpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify(data)\n        });\n\n        if (!response.ok) {\n            // API呼び出しが失敗した場合のエラーハンドリング\n            console.log(response);\n            const errorData = await response.json();\n            throw new Error(errorData.message || \"Failed to save conversation to DB\");\n        }\n\n        console.log(\"Conversation saved successfully.\");\n\n    } catch (error) {\n        console.error(\"Error saving conversation:\", error);\n        // ここでUIにエラー通知を出すなどの処理も可能\n    }\n}\n\n\n\n/**\n * 認証・CSRF対策済みのPOSTリクエストをバックエンドに送信します。\n * @param url APIのエンドポイント (例: '/api/chat')\n * @param request 送信するデータオブジェクト\n * @param authToken バックエンドセッション用の認証トークン\n * @returns fetchのレスポンス\n */\nexport async function postApi(url: string, request: any, authToken: string | null) {\n    // DjangoがセットしたCSRFトークンをクッキーから取得\n    const csrfToken = getCookie('csrftoken');\n\n    if (!authToken) {\n        // 認証トークンがない場合はエラー（ログインしていない可能性）\n        throw new Error(\"認証トークンがありません。ログインしていない可能性があります。\");\n    }\n    \n    if (!csrfToken) {\n        // CSRFトークンが見つからない場合、警告を出す\n        console.warn(\"CSRFトークンが見つかりません。DjangoへのPOSTリクエストは失敗する可能性があります。\");\n    }\n\n    return await fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            // 認証トークン（ログイン時にバックエンドから受け取ったもの）\n            'Authorization': `Bearer ${authToken}`,\n            // CSRFトークン（Djangoがクッキーにセットしたもの）\n            'X-CSRFToken': csrfToken || '' // 見つからない場合は空文字を送る\n        },\n        body: JSON.stringify(request)\n    });\n}","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFields {\n    Embedding = \"textEmbeddingOnly\",\n    ImageEmbedding = \"imageEmbeddingOnly\",\n    TextAndImageEmbeddings = \"textAndImageEmbeddings\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    query_rewriting?: boolean;\n    reasoning_effort?: string;\n    include_category?: string;\n    exclude_category?: string;\n    seed?: number;\n    top?: number;\n    max_subqueries?: number;\n    results_merge_strategy?: string;\n    temperature?: number;\n    minimum_search_score?: number;\n    minimum_reranker_score?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFields;\n    language: string;\n    use_agentic_retrieval: boolean;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: any };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ChatAppResponseOrError = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n    error?: string;\n};\n\n// export type ChatAppResponse = {\n//     message: ResponseMessage;\n//     delta: ResponseMessage | null;\n//     context: ResponseContext;\n//     session_state: any;\n// };\n\nexport interface AssistantResponse {\n  message: {\n    content: string;\n    role: 'assistant';\n  };\n  context: {\n    data_points: any[];\n    followup_questions: any[];\n    thoughts: any[];\n  };\n  session_state: null;\n  delta: null;\n}\n\nexport interface InitialAnswerRaw {\n  id: string;  \n  question: string;\n  answer: string;\n}\n\nexport type ChatAppResponse = {\n    message: { content: string; role: string; };\n    context: object; // 必要に応じてより詳細な型を定義\n    session_state: object | null;\n    delta: object | null;\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    session_state: any;\n};\n\nexport type Config = {\n    defaultReasoningEffort: string;\n    showGPT4VOptions: boolean;\n    showSemanticRankerOption: boolean;\n    showQueryRewritingOption: boolean;\n    showReasoningEffortOption: boolean;\n    streamingEnabled: boolean;\n    showVectorOption: boolean;\n    showUserUpload: boolean;\n    showLanguagePicker: boolean;\n    showSpeechInput: boolean;\n    showSpeechOutputBrowser: boolean;\n    showSpeechOutputAzure: boolean;\n    showChatHistoryBrowser: boolean;\n    showChatHistoryCosmos: boolean;\n    showAgenticRetrievalOption: boolean;\n};\n\nexport type SimpleAPIResponse = {\n    message?: string;\n};\n\nexport interface SpeechConfig {\n    speechUrls: (string | null)[];\n    setSpeechUrls: (urls: (string | null)[]) => void;\n    audio: HTMLAudioElement;\n    isPlaying: boolean;\n    setIsPlaying: (isPlaying: boolean) => void;\n}\n\nexport type HistoryListApiResponse = {\n    sessions: {\n        id: string;\n        entra_oid: string;\n        title: string;\n        timestamp: number;\n    }[];\n    continuation_token?: string;\n};\n\nexport type HistoryApiResponse = {\n    id: string;\n    entra_oid: string;\n    answers: any;\n};\n\n// DBから返ってくる履歴アイテムの型\nexport type HistoryItemFromDb = {\n    id: string;\n    question: string;\n    answer: string;\n    // 他のプロパティ\n};\n\nexport interface InitialAnswerRaw {\n    question: string;\n    answer: string;\n}\n\nexport type ConversationTurn = {\n  id: string;\n  question: string;\n  answer: ChatAppResponse;\n};\n","import React from 'react';\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { ChatAppResponse } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\n// Function to validate citation format and check if dataPoint starts with possible citation\nfunction isCitationValid(contextDataPoints: any, citationCandidate: string): boolean {\n    const regex = /.+\\.\\w{1,}(?:#\\S*)?$/;\n    if (!regex.test(citationCandidate)) {\n        return false;\n    }\n\n    // Check if contextDataPoints is an object with a text property that is an array\n    let dataPointsArray: string[];\n    if (Array.isArray(contextDataPoints)) {\n        dataPointsArray = contextDataPoints;\n    } else if (contextDataPoints && Array.isArray(contextDataPoints.text)) {\n        dataPointsArray = contextDataPoints.text;\n    } else {\n        return false;\n    }\n\n    const isValidCitation = dataPointsArray.some(dataPoint => {\n        return dataPoint.startsWith(citationCandidate);\n    });\n\n    return isValidCitation;\n}\n\nexport function parseAnswerToHtml(answer: ChatAppResponse, isStreaming: boolean): HtmlParsedAnswer {\n    const contextDataPoints = answer.context;\n    const citations: string[] = [];\n\n    // Trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.message.content.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n\n            if (!isCitationValid(contextDataPoints, part)) {\n                return `[${part}]`;\n            }\n\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import React from 'react';\nimport { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import React from 'react';\nimport { useMemo, useState } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport DOMPurify from \"dompurify\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\n\nimport styles from \"./Answer.module.css\";\nimport { ChatAppResponse, SpeechConfig } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    index: number;\n    speechConfig: SpeechConfig;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked?: (filePath: string) => void;\n    onThoughtProcessClicked?: () => void;\n    onSupportingContentClicked?: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n    showSpeechOutputBrowser?: boolean;\n    showSpeechOutputAzure?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    index,\n    speechConfig,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions,\n    showSpeechOutputAzure,\n    showSpeechOutputBrowser\n}: Props) => {\n    const followupQuestions = answer.context;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer, isStreaming), [answer]);\n    const { t } = useTranslation();\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n    const [copied, setCopied] = useState(false);\n\n    const handleCopy = () => {\n        // Single replace to remove all HTML tags to remove the citations\n        const textToCopy = sanitizedAnswerHtml.replace(/<a [^>]*><sup>\\d+<\\/sup><\\/a>|<[^>]+>/g, \"\");\n\n        navigator.clipboard\n            .writeText(textToCopy)\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => setCopied(false), 2000);\n            })\n            .catch(err => console.error(\"Failed to copy text: \", err));\n    };\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: copied ? \"CheckMark\" : \"Copy\" }}\n                            title={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            ariaLabel={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            onClick={handleCopy}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText}>\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\n                </div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.citation} title={x}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {/* {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )} */}\n        </Stack>\n    );\n};\n","import React from 'react';\nimport { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const { t, i18n } = useTranslation();\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        {t(\"generatingAnswer\")}\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import React from 'react';\nimport { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","/**\n * This file defines a context for managing login state in a React application.\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n * For more information, refer to the official React documentation:\n * https://react.dev/learn/passing-data-deeply-with-context\n */\n\nimport { createContext } from \"react\";\n\nexport const LoginContext = createContext({\n    loggedIn: false,\n    setLoggedIn: (_: boolean) => {}\n});\n","// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { Configuration, PublicClientApplication, IPublicClientApplication } from \"@azure/msal-browser\";\nconst BACKEND_URI = import.meta.env.VITE_BACKEND_URI || \"\";\nconst TENANTID = import.meta.env.VITE_TENANTID;\nconst CLIENTID = import.meta.env.VITE_CLIENTID;\n// const appServicesAuthTokenUrl = \"/api/.auth/me\";\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\n\ninterface AppServicesToken {\n    id_token: string;\n    access_token: string;\n    user_claims: Record<string, any>;\n    expires_on: string;\n}\n\ninterface AuthSetup {\n    useLogin: boolean;\n    requireAccessControl: boolean;\n    enableUnauthenticatedAccess: boolean;\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    // loginRequest: {\n    //     scopes: Array<string>;\n    //};\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(`/api/auth_setup`);\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\nexport const requireAccessControl = authSetup.requireAccessControl;\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\nexport const loginRequest = {\n    scopes: [import.meta.env.VITE_API_SCOPE_URI] // 既存のスコープに、必要なAPIスコープを追加\n};\n\n\nconst tokenRequest = authSetup.tokenRequest;\n\nexport const getRedirectUri = () => {\n    return authSetup.msalConfig.auth.redirectUri;\n};\n\ndeclare global {\n    var cachedAppServicesToken: AppServicesToken | null;\n}\nglobalThis.cachedAppServicesToken = null;\n\n/**\n * Retrieves an access token if the user is logged in using app services authentication.\n * Checks if the current token is expired and fetches a new token if necessary.\n * Returns null if the app doesn't support app services authentication.\n *\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\n */\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\n        const currentDate = new Date();\n        const expiresOnDate = new Date(appServicesToken.expires_on);\n        return expiresOnDate > currentDate;\n    };\n\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\n        return Promise.resolve(globalThis.cachedAppServicesToken);\n    }\n    return Promise.resolve(null);\n};\n\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\n\nexport const appServicesLogout = () => {\n    window.location.href = appServicesAuthLogoutUrl;\n};\n\n/**\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\n */\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\n    if (client) {\n        const activeAccount = client.getActiveAccount();\n        if (activeAccount) {\n            return true;\n        }\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return true;\n    }\n\n    return false;\n};\n\nexport const msalConfig: Configuration = {\n    auth: {\n        clientId: CLIENTID,\n        authority: `https://login.microsoftonline.com/${TENANTID}`, \n        redirectUri: \"http://localhost:5173\",\n        navigateToLoginRequestUrl: false\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // ブラウザのどこに認証情報を保存するか\n        storeAuthStateInCookie: false,\n    }\n};\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\n// Use the access token from app services login if available\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return Promise.resolve(appServicesToken.access_token);\n    }\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .then(r => r.accessToken)\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n\n/**\n * Retrieves the username of the active account.\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\n */\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.username;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken?.user_claims) {\n        return appServicesToken.user_claims.preferred_username;\n    }\n\n    return null;\n};\n\n/**\n * Retrieves the token claims of the active account.\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\n */\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.idTokenClaims;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return appServicesToken.user_claims;\n    }\n\n    return undefined;\n};\n\n\n","import React from 'react';\nimport { useState, useEffect, useContext } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./QuestionInput.module.css\";\nimport { LoginContext } from \"../../loginContext\";\nimport { requireLogin } from \"../../authConfig\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n    showSpeechInput?: boolean;\n    chatMessageStreamEnd: React.RefObject<HTMLDivElement>;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, chatMessageStreamEnd }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n    const { loggedIn } = useContext(LoginContext);\n    const { t } = useTranslation();\n    const [isComposing, setIsComposing] = useState(false);\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n\n        //chatMessageStreamEnd?.current?.scrollIntoView({ behavior: \"smooth\" });\n        setTimeout(() => {\n            chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" });\n        }, 50);\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (isComposing) return;\n\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const handleCompositionStart = () => {\n        setIsComposing(true);\n    };\n    const handleCompositionEnd = () => {\n        setIsComposing(false);\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n                onCompositionStart={handleCompositionStart}\n                onCompositionEnd={handleCompositionEnd}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content={t(\"tooltips.submitQuestion\")} relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import React from 'react';\nimport styles from \"./UserChatMessage.module.css\";\n\nexport const UserChatMessage = ({ message, id }: { message: string, id: string }) => {\n    return (\n        // 1. この外側のdivに container スタイルを適用して、右寄せを担当させます\n        //    スクロール機能のためのidも、この一番外側の要素に付けます\n        <div className={styles.container} id={`message-${id}`}>\n            \n            {/* 2. この内側のdivに message スタイルを適用して、吹き出しの見た目を担当させます */}\n            <div className={styles.message}>\n                {message}\n            </div>\n\n        </div>\n    );\n}","import React from 'react';\nimport { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    const { t, i18n } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"clearChat\")}\n            </Button>\n        </div>\n    );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport './menu.css';\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getToken, useLogin } from \"../../authConfig\";\r\nimport { useNavigate } from \"react-router-dom\"; \r\n\r\n// 型定義\r\ntype Props = {};\r\ntype UsageResponse = { count?: number | null; limit: number };\r\ntype ChatHistoryItem = { id: string; title: string; historyBoxId: string;};\r\n\r\nconst SidebarMenu: React.FC<Props> = () => {\r\n  const navigate = useNavigate();\r\n  const onSelectChat = (id: string) => {\r\n      // 1. クリックされたIDを元に、history配列から該当するアイテムを探します\r\n      const clickedItem = history?.find((item: any) => item.id === id);\r\n\r\n      // 2. アイテムが見つからなかった場合は、念のため処理を中断します\r\n      if (!clickedItem) {\r\n          console.error(\"Clicked history item not found!\");\r\n          return;\r\n      }\r\n      const historyBoxIdToPass = clickedItem.historyBoxId;\r\n\r\n      console.log(\"【1. クリック検知】クリックされたアイテム:\", clickedItem);\r\n      console.log(\"【11. クリック検知】クリックされたアイテム:\", historyBoxIdToPass);\r\n\r\n      // 3. URLの末尾に「# + 質問のタイトル」を追加してページを移動させます\r\n      navigate(`/chat/${clickedItem.id}?historyBoxId=${historyBoxIdToPass}`);\r\n  };\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n  const [usageCount, setUsageCount] = useState<UsageResponse | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const [history, setHistory] = useState<ChatHistoryItem[] | undefined>(undefined)\r\n  const [isHistoryLoading, setIsHistoryLoading] = useState(true);\r\n  const [historyError, setHistoryError] = useState<string | null>(null);\r\n\r\n  const { instance: msalInstance, accounts } = useMsal();\r\n  const client = useLogin ? msalInstance : undefined;\r\n\r\n  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);\r\n\r\n  // チャット履歴（summary）の他に、選択されたチャットの詳細データを別途取得したり\r\n  // あるいは履歴の中に詳細があるならそちらを使う\r\n\r\n  // 選択時に詳細を取得する例（fetchChatDetailは別途作成する想定）\r\n  //const [selectedChatDetail, setSelectedChatDetail] = useState<ChatDetailType | null>(null);\r\n  const [isChatLoading, setIsChatLoading] = useState(false);\r\n\r\n  // --- 利用回数取得 ---\r\n  const fetchUsageCount = useCallback(async () => {\r\n    if (accounts.length === 0) {\r\n      setError(\"認証されていません。\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setIsHistoryLoading(true);\r\n      const userId = accounts[0].username;\r\n      const params = new URLSearchParams({ userId });\r\n      console.log(\" ✅✅✅✅✅:✅\", params);\r\n      const dbToken = client ? await getToken(client) : undefined;\r\n\r\n      const response = await fetch(`/api/checkcount/?${params}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${dbToken}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTPエラー: ${response.status}`);\r\n\r\n      const data: UsageResponse = await response.json();\r\n      setUsageCount(data);\r\n      setError(null);\r\n    } catch (e) {\r\n      const message = e instanceof Error ? e.message : \"不明なエラー\";\r\n      setError(message);\r\n      console.error(\"Usage count fetch failed:\", e);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [accounts]);\r\n\r\n\r\n\r\n  // --- 履歴取得 ---\r\n  const fetchHistory = useCallback(async () => {\r\n    if (accounts.length === 0) {\r\n      setHistoryError(\"認証されていません。\");\r\n      setIsHistoryLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsHistoryLoading(true);\r\n      const userId = accounts[0].username;\r\n      if (!userId) throw new Error(\"userIdがアカウントに含まれていません。\");\r\n\r\n      const params = new URLSearchParams({ userId });\r\n      console.log(\" ✅✅✅✅✅:✅\", params);\r\n      const dbToken = client ? await getToken(client) : undefined;\r\n\r\n      const response = await fetch(`/api/history/?${params}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${dbToken}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTPエラー: ${response.status}`);\r\n\r\n      const data: ChatHistoryItem[] = await response.json();\r\n      console.log(\"✅ fetchHistory setHistorysetHistorysetHistory:\", data); // これを追加\r\n      setHistory(data);\r\n      setHistoryError(null);\r\n    } catch (e) {\r\n      const message = e instanceof Error ? e.message : \"不明なエラー\";\r\n      setHistoryError(message);\r\n      console.error(\"History fetch failed:\", e);\r\n    } finally {\r\n      setIsHistoryLoading(false);\r\n    }\r\n  }, [accounts, client]);\r\n  \r\n    const onHamburgerClick = () => {\r\n    setIsMenuOpen(!isMenuOpen)\r\n    fetchUsageCount();  // 非同期関数を呼んでいるだけ（awaitは不要）\r\n    fetchHistory();\r\n  };\r\n\r\n  // --- 利用回数表示用コンポーネント ---\r\n  const UsageDisplay: React.FC = () => {\r\n    if (!usageCount) return <div className=\"usage-display error\">取得中</div>;\r\n\r\n    return (\r\n      <div className=\"usage-display\">\r\n        <span>今月の利用回数:</span>\r\n        <strong style={{ marginLeft: '8px' }}>\r\n          {usageCount.count ?? 0} / {usageCount.limit}\r\n        </strong>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n    navigate(\"/\");        // ← ここで新しいチャット画面に遷移\r\n    setIsMenuOpen(false);     // メニューを閉じる（任意）\r\n  };\r\n\r\n  // --- メニューUI ---\r\n  return (\r\n    <>\r\n      <div className={`overlay ${isMenuOpen ? 'active' : ''}`} onClick={() => setIsMenuOpen(false)}></div>\r\n\r\n      <button \r\n        className=\"hamburger-menu\" \r\n        aria-label=\"メニューを開く\" \r\n        onClick={onHamburgerClick}\r\n      >\r\n        <span></span><span></span><span></span>\r\n      </button>\r\n\r\n      <nav className={`sidebar ${isMenuOpen ? 'open' : ''}`}>\r\n        <div className=\"sidebar-header\">\r\n          <button className=\"new-chat-button\" onClick={handleNewChat}>＋ 新規チャット開始</button>\r\n        </div>\r\n\r\n        <ul className=\"chat-history\">\r\n        {isHistoryLoading ? (\r\n          <li>読み込み中...</li>\r\n        ) : Array.isArray(history) && history.length > 0 ? (\r\n          history.map((item: ChatHistoryItem) => (\r\n            <li key={item.id}>\r\n              {/* aタグをやめてボタンやspanに変更 */}\r\n              <button className=\"chat-history-button\" onClick={() => onSelectChat(item.id)}>\r\n                {item.title}\r\n              </button>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <li>チャット履歴はありません</li>\r\n        )}\r\n        </ul>\r\n\r\n        <div className=\"sidebar-footer\">\r\n          <UsageDisplay />\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMenu;","import { createContext, useContext, useState } from \"react\";\r\nimport React from \"react\";\r\n\r\nconst AuthContext = createContext<{ token: string | null, setToken: (token: string) => void }>({\r\n  token: null,\r\n  setToken: () => {}\r\n});\r\n\r\nexport const useAuthToken = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [token, setToken] = useState<string | null>(null);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, setToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ntype SimpleModalProps = {\r\n  visible: boolean;\r\n  title: string;\r\n  onOk?: () => void;\r\n};\r\n\r\nconst SimpleModal: React.FC<SimpleModalProps> = ({ visible, title, onOk }) => {\r\n  if (!visible) return null;\r\n\r\n  return (\r\n    <div className=\"modal-backdrop\" style={{\r\n      position: \"fixed\",\r\n      top: 0, left: 0, right: 0, bottom: 0,\r\n      backgroundColor: \"rgba(0,0,0,0.5)\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      zIndex: 9999,\r\n    }}>\r\n      <div className=\"modal\" style={{\r\n        background: \"white\",\r\n        padding: \"20px\",\r\n        borderRadius: \"8px\",\r\n        maxWidth: \"400px\",\r\n        width: \"90%\",\r\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.3)\",\r\n        textAlign: \"center\",\r\n      }}>\r\n        <h2>{title}</h2>\r\n        <button\r\n          onClick={() => onOk?.()}\r\n          style={{\r\n            marginTop: \"20px\",\r\n            padding: \"8px 16px\",\r\n            fontSize: \"16px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          OK\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleModal;\r\n","import React from 'react';\n//import { useAppAuth } from '../../AuthHandler'; \nimport { useRef, useState, useEffect, useContext, useLayoutEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Panel, DefaultButton } from \"@fluentui/react\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport appLogo from \"../../assets/applogo.svg\";\nimport styles from \"./Chat.module.css\";\nimport { saveConversationToDb } from \"../../api\";\n\nimport {\n    chatApi,\n    // configApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFields,\n    GPT4VInput,\n    SpeechConfig\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\nimport Sidebarmenu from '../../components/menu/menu';\nimport { msalInstance  } from '../../authConfig'; // 以前デバッグしたトークン取得関数   \nimport { useAuthToken } from \"../../AuthContext\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { useNavigate } from \"react-router-dom\";\nimport { ConversationTurn, InitialAnswerRaw } from \"../../api\";\nimport  SimpleModal   from \"./SimpleModal\";\n\ninterface ChatProps {\n  initialAnswers?: InitialAnswerRaw[];\n  targetId?: string | null;\n  historyBoxId?: string | null;\n}\nconst Chat = ({ initialAnswers, targetId ,historyBoxId }: ChatProps) => {\n    const [localHistoryBoxId, setLocalHistoryBoxId] = useState<string | null>(historyBoxId || null);\n    useEffect(() => {\n        if (!localHistoryBoxId) {\n        // 💡 props で渡されてなかった場合に uuid を生成\n        const newId = uuidv4();\n        setLocalHistoryBoxId(newId);\n        }\n    }, [localHistoryBoxId]);\n    const lastQuestionRef = useRef<string>(\"\");\n    const [answers, setAnswers] = useState<ConversationTurn[]>(() => {\n            // もし initialAnswers (履歴データ) が渡されていたら...\n            if (initialAnswers && initialAnswers.length > 0) {\n                // ...それを <Chat> コンポーネントが内部で使う形式 ([string, ChatAppResponse][]) に変換する\n                const transformedHistory = initialAnswers.map(item => {\n                    const answerObject: ChatAppResponse = {\n                        message: { content: item.answer, role: 'assistant' },\n                        context: { data_points: [], followup_questions: [], thoughts: [] },\n                        session_state: null,\n                        delta: null\n                    };\n                    return {\n                        id: item.id || uuidv4(), // initialAnswersの各要素に .id が必要\n                        question: item.question,\n                        answer: answerObject\n                    };\n                });\n                lastQuestionRef.current = \"履歴取得\";\n                return transformedHistory;\n            }\n            \n            // 履歴データがなければ、空の配列で初期化する\n            return [];\n        });\n        console.info(answers)\n    \n    const [scrollToId, setScrollToId] = useState<string | null>(null);\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [maxSubqueryCount, setMaxSubqueryCount] = useState<number>(10);\n    const [resultsMergeStrategy, setResultsMergeStrategy] = useState<string>(\"interleaved\");\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Vectors);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useQueryRewriting, setUseQueryRewriting] = useState<boolean>(false);\n    const [reasoningEffort, setReasoningEffort] = useState<string>(\"\");\n    const [streamingEnabled, setStreamingEnabled] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFields, setVectorFields] = useState<VectorFields>(VectorFields.TextAndImageEmbeddings);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [activeCitation, setActiveCitation] = useState<string>();\n    // const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showQueryRewritingOption, setShowQueryRewritingOption] = useState<boolean>(false);\n    const [showReasoningEffortOption, setShowReasoningEffortOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\n    const [showChatHistoryCosmos, setShowChatHistoryCosmos] = useState<boolean>(false);\n    const [showAgenticRetrievalOption, setShowAgenticRetrievalOption] = useState<boolean>(false);\n    const [useAgenticRetrieval, setUseAgenticRetrieval] = useState<boolean>(false);\n    const navigate = useNavigate();\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n    const { instance } = useMsal();\n    // state定義（親コンポーネント内）\n    const [modalVisible, setModalVisible] = useState(false);\n    const [modalContent, setModalContent] = useState({ title: \"\"});\n\n    // モーダルを閉じる関数\n    const hideModal = () => setModalVisible(false);\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const { token } = useAuthToken();\n    \n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        // 1. UI Stateの準備\n        // 画面のローディング状態などをリセット\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        // setActiveAnalysisPanelTab(undefined);\n\n        // 最初にユーザーの質問と、空の回答欄をUIに追加する\n        // これにより、ユーザーは即座にフィードバックを得られる\n        const initialResponse: ChatAppResponse = {\n            message: { content: \"\", role: \"assistant\" },\n            delta: null,\n            context: { data_points: [], followup_questions: [], thoughts: [] },\n            session_state: {}\n        };\n        // ★Stateを更新する際は、必ず更新用の関数 (setAnswers) を使う\n        //setAnswers(prevAnswers => [...prevAnswers, [question, initialResponse]]);\n        const newTurn: ConversationTurn = {\n            id: uuidv4(), // 新しいIDを生成\n            question: question,\n            answer: initialResponse\n        };\n        setAnswers(prevAnswers => [...prevAnswers, newTurn]);\n\n        try {\n            // 2. APIリクエストの構築\n            // 認証トークンの取得\n            const token = client ? await getToken(client) : undefined;\n            const account = instance.getActiveAccount();\n            if (!account) {\n                throw new Error(\"No active account\");\n            }\n\n            // 現在の会話履歴からAPI用のメッセージ配列を作成\n            // 注意：setAnswersは非同期のため、ここでは更新前のanswersを使う\n            const history = answers.flatMap(turn => [{ content: turn.question, role: \"user\" }, { content: turn.answer.message.content, role: \"assistant\" }]);\n\n            const request: ChatAppRequest = {\n                messages: [...history, { content: question, role: \"user\" }],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate || undefined,\n                        include_category: includeCategory || undefined,\n                        exclude_category: excludeCategory || undefined,\n                        top: retrieveCount,\n                        max_subqueries: maxSubqueryCount,\n                        results_merge_strategy: resultsMergeStrategy,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        query_rewriting: useQueryRewriting,\n                        reasoning_effort: reasoningEffort,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFields,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        use_agentic_retrieval: useAgenticRetrieval,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                session_state: answers.length ? answers[answers.length - 1].answer.session_state : null\n            };\n\n            // --- DB保存用の共通関数を定義 ---\n            const saveConversation = async (question: string, answer: ChatAppResponse) => {\n                // session_state がなければ保存しない\n                // if (!answer.session_state) return;\n\n                try {\n                    console.log(\"DBへの会話保存処理を開始します...\");\n                    const dbToken = client ? await getToken(client) : undefined;\n                    const userId = client?.getActiveAccount()?.username || \"unknown-user\";\n                    const activeAccount = client?.getActiveAccount();\n                    const tenantId = activeAccount?.tenantId;\n                    const conversationId = uuidv4(); \n\n                    await saveConversationToDb({\n                        userId: userId,\n                        tenantId: tenantId,\n                        conversationId: conversationId,\n                        question: question,\n                        answer: answer,\n                        historyBoxId: localHistoryBoxId ?? undefined,\n                    }, dbToken);\n\n                    console.log(\"会話が正常にDBへ保存されました。\");\n                } catch (error) {\n                    console.error(\"DBへの会話保存中にエラーが発生しました:\", error);\n                }\n            };\n\n            // 3. API呼び出しとレスポンス処理\n                const response = await chatApi(request, token ?? null);\n\n                if (!response.ok) {\n                    const errorBody = await response.json();\n                    const error = new Error();\n                    (error as any).code = errorBody.error || \"unknown_error\";\n                    throw error;\n                }\n                if (!response.body) {\n                    throw new Error(\"Response body is null\");\n                }\n\n            let finalAnswer: ChatAppResponse;\n\n// ===============================================================================================\n//  以下ストリーミング回答用\n            if (shouldStream) {\n                // --- ストリーミング処理 ---\n                setIsStreaming(true);\n                const reader = response.body.getReader();\n                const decoder = new TextDecoder();\n                let partialData = \"\";\n\n                while (true) {\n                    const { value, done } = await reader.read();\n                    if (done) break;\n\n                    partialData += decoder.decode(value, { stream: true });\n                    const dataBlocks = partialData.split(\"\\n\\n\");\n\n                    for (let i = 0; i < dataBlocks.length - 1; i++) {\n                        const block = dataBlocks[i];\n                        if (block.startsWith(\"data: \")) {\n                            const jsonString = block.substring(6);\n                            try {\n                                const event = JSON.parse(jsonString);\n                                setAnswers(prevAnswers => {\n                                    const newAnswers = [...prevAnswers];\n                                    const lastAnswer = newAnswers[newAnswers.length - 1].answer;\n                                    if (event.content) {\n                                        lastAnswer.message.content += event.content;\n                                    }\n                                    if (event.context) {\n                                        lastAnswer.context = { ...lastAnswer.context, ...event.context };\n                                    }\n                                    if (event.session_state) {\n                                        lastAnswer.session_state = { ...(lastAnswer.session_state || {}), ...event.session_state };\n                                    }\n                                    return newAnswers;\n                                });\n                            } catch (e) {\n                                console.error(\"Failed to parse stream data:\", jsonString, e);\n                            }\n                        }\n                    }\n                    partialData = dataBlocks[dataBlocks.length - 1];\n                }\n                finalAnswer =  { ...initialResponse };\n            } else {\n// ===============================================================================================\n\n                // --- 非ストリーミング処理 ---\n                const parsedResponse = await response.json();\n                if (parsedResponse.error) {\n                    throw new Error(parsedResponse.error);\n                }\n                // 最後の回答を、受信した完全なレスポンスで置き換える\n                setAnswers(prevAnswers => {\n                    const newAnswers = [...prevAnswers];\n                    newAnswers[newAnswers.length - 1].answer = parsedResponse;\n                    return newAnswers;\n                });\n                finalAnswer = parsedResponse;\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                const token = client ? await getToken(client) : undefined;\n                const historyForManager = answers.map(turn => [turn.question, turn.answer] as [string, ChatAppResponse]);\n                // historyManager.addItem(parsedResponse.session_state, [...historyForManager, [question, parsedResponse]], token);\n                };\n// ===============================================================================================\n//  以下ストリーミング回答用\n            }\n// ===============================================================================================\n\n            await saveConversation(question, finalAnswer);\n        } catch (e: any) {\n            if (e.code === \"rate_limit\") {\n                setModalContent({\n                    title: \"利用上限に達しました\",\n                });\n                setModalVisible(true);\n                setAnswers(prevAnswers => {\n                    const newAnswers = [...prevAnswers];\n                    newAnswers[newAnswers.length - 1].answer.message.content = \"利用上限に達しました\";\n                    return newAnswers;})\n            } else {\n                console.error(\"チャットAPIエラー:\", e);\n            \n                setError(e);\n                // エラーが発生した場合、最後の回答欄にエラーメッセージを表示する\n                setAnswers(prevAnswers => {\n                    const newAnswers = [...prevAnswers];\n                    newAnswers[newAnswers.length - 1].answer.message.content = \"エラーが発生しました: \" + e.message;\n                    return newAnswers;\n                });\n            }\n        } finally {\n            // 5. 最終処理\n            setIsLoading(false);\n            setIsStreaming(false);\n        }\n    };\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        // setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setSpeechUrls([]);\n        // setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n        navigate(\"/\");\n    };\n\n    useLayoutEffect(() => {\n        console.log(\"【3. Chat 検証】スクロールターゲットを探すuseEffectが実行されました。targetId:\", targetId);\n\n        // targetQuestion があり、answersがセットされた後に実行\n        if (targetId && answers.length > 0) {\n            const targetTurn = answers.find(turn => turn.id === targetId);\n            if (targetTurn) {\n                console.log(\"【3. Chat 検証】ターゲットが見つかりました！ID:\", targetTurn.id);\n                setScrollToId(targetTurn.id);\n            } else {\n                console.log(\"【3. Chat 検証】ターゲットが見つかりませんでした。\");\n            }\n        }\n    }, [targetId]); // answersとtargetQuestionが変わった時に実行\n\n\n    useLayoutEffect(() => {\n        if (scrollToId) {\n            const element = document.getElementById(`message-${scrollToId}`);\n            if (element) {\n                element.scrollIntoView({ behavior: \"auto\", block: \"start\" });\n            }\n            setScrollToId(null); // 処理後にリセット\n        }\n    }, [answers, scrollToId]);\n\n    // const onShowCitation = (citation: string, index: number) => {\n    //     if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n    //         setActiveAnalysisPanelTab(undefined);\n    //     } else {\n    //         setActiveCitation(citation);\n    //         setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n    //     }\n\n    //     setSelectedAnswer(index);\n    // };\n    // const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n    //     if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n    //         setActiveAnalysisPanelTab(undefined);\n    //     } else {\n    //         setActiveAnalysisPanelTab(tab);\n    //     }\n\n    //     setSelectedAnswer(index);\n    // };\n    const { t, i18n } = useTranslation();\n\n\n    return (\n        <div className={styles.container}>\n            {/* Setting the page title using react-helmet-async */}\n            <Helmet>\n                <title>{t(\"pageTitle\")}</title>\n            </Helmet>\n            <div className={styles.commandsSplitContainer}>\n                <div className={styles.commandsContainer}>\n                    {/* {((useLogin && showChatHistoryCosmos) || showChatHistoryBrowser) && (\n                        <HistoryButton className={styles.commandButton} onClick={() => setIsHistoryPanelOpen(!isHistoryPanelOpen)} />\n                    )} */}\n                </div>\n                <div className={styles.commandsContainer}>\n                    <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                    {/* {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />} */}\n                    {/* <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} /> */}\n                </div>\n            </div>\n            <Sidebarmenu/>\n            <div className={styles.chatRoot} style={{ marginLeft: isHistoryPanelOpen ? \"300px\" : \"0\" }}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <img src={appLogo} alt=\"App logo\" width=\"120\" height=\"120\" />\n\n                            <h1 className={styles.chatEmptyStateTitle}>{t(\"chatEmptyStateTitle\")}</h1>\n                            {/* <h2 className={styles.chatEmptyStateSubtitle}>{t(\"chatEmptyStateSubtitle\")}</h2> */}\n                            {/* {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />} */}\n\n                            {/* <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} /> */}\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {answers.map((turn, index) => {\n                                const isLastAnswer = index === answers.length - 1;\n\n                                return (\n                                    <div key={turn.id}>\n                                        <UserChatMessage message={turn.question} id={turn.id} />\n                                        <div className={styles.chatMessageGpt}>\n                                            {/* 最後の回答欄の表示を、Stateに応じて切り替える */}\n                                            {isLastAnswer && error ? (\n                                                <div className={styles.chatMessageGptMinWidth}>\n                                                    <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                                </div>\n                                            ) : isLastAnswer && isLoading ? (\n                                                <div className={styles.chatMessageGptMinWidth}>\n                                                    <AnswerLoading />\n                                                </div>\n                                            ) : (\n                                                <Answer\n                                                    isStreaming={isStreaming && isLastAnswer} // ストリーミング中も正しく表示\n                                                    key={index}\n                                                    answer={turn.answer}\n                                                    index={index}\n                                                    speechConfig={speechConfig}\n                                                    // isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                    // onCitationClicked={c => onShowCitation(c, index)}\n                                                    // onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                    // onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                    // onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                    // showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                    // showSpeechOutputAzure={showSpeechOutputAzure}\n                                                    // showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder={t(\"defaultExamples.placeholder\")}\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                            showSpeechInput={showSpeechInput}\n                            chatMessageStreamEnd={chatMessageStreamEnd}\n                        />\n                    </div>\n                </div>\n            </div>\n            {/* モーダル */}\n            {modalVisible && (\n                <SimpleModal\n                visible={modalVisible} \n                title={modalContent.title}\n                onOk={hideModal}\n                />\n            )}\n        </div>\n        \n    );\n};\n\nexport default Chat;","import React from 'react';\nimport { DefaultButton } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { LoginContext } from \"../../loginContext\";\n\nexport const LoginButton = () => {\n    const { instance } = useMsal();\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\n    const activeAccount = instance.getActiveAccount();\n    const [username, setUsername] = useState(\"\");\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        const fetchUsername = async () => {\n            setUsername((await getUsername(instance)) ?? \"\");\n        };\n\n        fetchUsername();\n    }, []);\n\n    const handleLoginPopup = () => {\n        /**\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n         */\n        instance\n            .loginPopup({\n                ...loginRequest,\n                redirectUri: getRedirectUri()\n            })\n            .catch(error => console.log(error))\n            .then(async () => {\n                setLoggedIn(await checkLoggedIn(instance));\n                setUsername((await getUsername(instance)) ?? \"\");\n            });\n    };\n    const handleLogoutPopup = () => {\n        if (activeAccount) {\n            instance\n                .logoutPopup({\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\n                    account: instance.getActiveAccount()\n                })\n                .catch(error => console.log(error))\n                .then(async () => {\n                    setLoggedIn(await checkLoggedIn(instance));\n                    setUsername((await getUsername(instance)) ?? \"\");\n                });\n        } else {\n            appServicesLogout();\n        }\n    };\n    return (\n        <DefaultButton\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\n            className={styles.loginButton}\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\n        ></DefaultButton>\n    );\n};\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\nimport { IconButton } from \"@fluentui/react\";\n\nconst Layout = () => {\n    const { t } = useTranslation();\n    const [menuOpen, setMenuOpen] = useState(false);\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\n\n    const toggleMenu = () => {\n        setMenuOpen(!menuOpen);\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n            setMenuOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        if (menuOpen) {\n            document.addEventListener(\"mousedown\", handleClickOutside);\n        } else {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [menuOpen]);\n\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer} ref={menuRef}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>{t(\"headerTitle\")}</h3>\n                    </Link>\n                    <nav>\n                        <ul className={`${styles.headerNavList} ${menuOpen ? styles.show : \"\"}`}>\n                            <li>\n                                <NavLink\n                                    to=\"/\"\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\n                                    onClick={() => setMenuOpen(false)}\n                                >\n                                    {t(\"chat\")}\n                                </NavLink>\n                            </li>\n                            {/* <li>\n                                <NavLink\n                                    to=\"/qa\"\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\n                                    onClick={() => setMenuOpen(false)}\n                                >\n                                    {t(\"qa\")}\n                                </NavLink>\n                            </li> */}\n                        </ul>\n                    </nav>\n                    <div className={styles.loginMenuContainer}>\n                        {useLogin && <LoginButton />}\n                        <IconButton\n                            iconProps={{ iconName: \"GlobalNavButton\" }}\n                            className={styles.menuToggle}\n                            onClick={toggleMenu}\n                            ariaLabel={t(\"labels.toggleMenu\")}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","// import { useEffect } from \"react\";\n// import { Outlet } from \"react-router-dom\";\n// import { useIsAuthenticated, useMsal } from \"@azure/msal-react\";\n// import { InteractionStatus } from \"@azure/msal-browser\";\n// import { loginRequest } from \"./authConfig\";\n// import React from 'react';\n\n// const LayoutWrapper = () => {\n//     const { instance, inProgress } = useMsal();\n//     const isAuthenticated = useIsAuthenticated();\n\n//     // ★★★ 修正点 ① ★★★\n//     // アプリ本体を表示すべきかどうかを、一つの変数にまとめます。\n//     const shouldShowApp = isAuthenticated && inProgress === InteractionStatus.None;\n\n//     useEffect(() => {\n//         // リダイレクトを開始するロジックは変更ありません\n//         if (!isAuthenticated && inProgress === InteractionStatus.None) {\n//             instance.loginRedirect(loginRequest);\n//         }\n//     }, [isAuthenticated, inProgress, instance]);\n\n//     // ★★★ 修正点 ② ★★★\n//     // レンダリングロジックをシンプルな if/else にします。\n//     if (shouldShowApp) {\n//         // 条件を満たす場合のみ、アプリ本体（<Outlet />）を表示します。\n//         return <Outlet />;\n//     } else {\n//         // それ以外のすべての場合（処理中、リダイレクト待ちなど）は\n//         // 一貫してローディング画面を表示します。\n//         // return <div>Loading...</div>;\n//     }\n// };\n\n// export default LayoutWrapper;\n\n\nimport { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\nimport { useEffect, useState } from \"react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { LoginContext } from \"./loginContext\";\nimport Layout from \"./pages/layout/Layout\";\nimport React from 'react';\nimport { msalInstance } from './authConfig';\n\nconst LayoutWrapper = () => {\n    const [loggedIn, setLoggedIn] = useState(false);\n    if (useLogin) {\n        // var msalInstance = new PublicClientApplication(msalConfig);\n        // Default to using the first account if no account is active on page load\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n        }\n        // Listen for sign-in event and set active account\n        msalInstance.addEventCallback(event => {\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n                const account = event.payload as AccountInfo;\n                msalInstance.setActiveAccount(account);\n            }\n        });\n        useEffect(() => {\n            const fetchLoggedIn = async () => {\n                setLoggedIn(await checkLoggedIn(msalInstance));\n            };\n            fetchLoggedIn();\n        }, []);\n        return (\n            <MsalProvider instance={msalInstance}>\n                <LoginContext.Provider\n                    value={{\n                        loggedIn,\n                        setLoggedIn\n                    }}\n                >\n                    <Layout />\n                </LoginContext.Provider>\n            </MsalProvider>\n        );\n    } else {\n        return (\n            <LoginContext.Provider\n                value={{\n                    loggedIn,\n                    setLoggedIn\n                }}\n            >\n                <Layout />\n            </LoginContext.Provider>\n        );\n    }\n};\nexport default LayoutWrapper;\n","import i18next from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport HttpApi from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport daTranslation from \"../locales/da/translation.json\";\nimport enTranslation from \"../locales/en/translation.json\";\nimport esTranslation from \"../locales/es/translation.json\";\nimport frTranslation from \"../locales/fr/translation.json\";\nimport jaTranslation from \"../locales/ja/translation.json\";\nimport nlTranslation from \"../locales/nl/translation.json\";\nimport ptBRTranslation from \"../locales/ptBR/translation.json\";\nimport trTranslation from \"../locales/tr/translation.json\";\nimport itTranslation from \"../locales/it/translation.json\";\n\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\n    da: {\n        name: \"Dansk\",\n        locale: \"da-DK\"\n    },\n    en: {\n        name: \"English\",\n        locale: \"en-US\"\n    },\n    es: {\n        name: \"Español\",\n        locale: \"es-ES\"\n    },\n    fr: {\n        name: \"Français\",\n        locale: \"fr-FR\"\n    },\n    ja: {\n        name: \"日本語\",\n        locale: \"ja-JP\"\n    },\n    nl: {\n        name: \"Nederlands\",\n        locale: \"nl-NL\"\n    },\n    ptBR: {\n        name: \"Português Brasileiro\",\n        locale: \"pt-BR\"\n    },\n    tr: {\n        name: \"Türkçe\",\n        locale: \"tr-TR\"\n    },\n    it: {\n        name: \"Italiano\",\n        locale: \"it-IT\"\n    }\n};\n\ni18next\n    .use(HttpApi)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources: {\n            da: { translation: daTranslation },\n            en: { translation: enTranslation },\n            es: { translation: esTranslation },\n            fr: { translation: frTranslation },\n            ja: { translation: jaTranslation },\n            nl: { translation: nlTranslation },\n            ptBR: { translation: ptBRTranslation },\n            tr: { translation: trTranslation },\n            it: { translation: itTranslation }\n        },\n        fallbackLng: \"en\",\n        supportedLngs: Object.keys(supportedLngs),\n        debug: import.meta.env.DEV,\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18next;\n","// AuthHandler.tsx\r\n\r\nimport { useMsal, useIsAuthenticated } from \"@azure/msal-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { InteractionRequiredAuthError } from \"@azure/msal-browser\";\r\nimport { useAuthToken } from \"./AuthContext\";\r\n// AppAuthProviderなど、あなたのアプリの状態管理に合わせてください\r\n// import { useAppAuth } from \"./AuthProvider\"; \r\n\r\nexport const AuthHandler = ({ children }: { children: React.ReactNode }) => {\r\n    console.log(\"🔥🔥🔥 AuthHandler component is rendering! 🔥🔥🔥\");\r\n    const { instance } = useMsal();\r\n    const isAuthenticated = useIsAuthenticated();\r\n    // const { setIsSessionReady } = useAppAuth(); // アプリのセッション準備完了を伝えるための状態更新関数\r\n\r\n    const [loginAttempted, setLoginAttempted] = useState(false);\r\n    const { setToken } = useAuthToken();\r\n    useEffect(() => {\r\n        console.log(\"✅ [AuthHandler Effect] useEffect is running.\");\r\n        // MSALでの認証が成功し、まだバックエンドセッションの確立を試みていない場合\r\n        if (isAuthenticated && !loginAttempted) {\r\n            setLoginAttempted(true);\r\n\r\n            const establishBackendSession = async () => {\r\n                try {\r\n                    // 1. MSALからIDトークンを取得（バックエンドへの身分証明書）\r\n                    const activeAccount = instance.getActiveAccount();\r\n                    if (!activeAccount) {\r\n                        throw new Error(\"No active MSAL account.\");\r\n                    }\r\n                    const msalTokenResponse = await instance.acquireTokenSilent({\r\n                        account: activeAccount,\r\n                        scopes:[import.meta.env.VITE_API_SCOPE_URI] // ログイン時に使用したスコープ\r\n                    });\r\n                    setToken(msalTokenResponse.accessToken);\r\n                    console.log(\"Token set:\", msalTokenResponse.accessToken);\r\n                    console.log(\"✅ MSALアクセストークンの取得と設定に成功しました。\");\r\n\r\n                } catch (error) {\r\n                    console.error(\"Failed to establish backend session:\", error);\r\n                    console.error(\"バックエンドセッションの確立に失敗しました:\", error);\r\n                    // エラーハンドリング（例：エラーページにリダイレクト）\r\n                    if (error instanceof InteractionRequiredAuthError) {\r\n                        const tokenResponse = await instance.acquireTokenPopup({\r\n                        scopes: [import.meta.env.VITE_API_SCOPE_URI], // 必要なスコープ\r\n                        });\r\n                        setToken(tokenResponse.accessToken);\r\n                    } else {\r\n                        throw error;\r\n                    }\r\n                }\r\n            };\r\n\r\n            establishBackendSession();\r\n        \r\n        }\r\n        return () => {\r\n        // このログが表示されれば、コンポーネントがアンマウントされたことが確定します\r\n        console.log(\"❌ [AuthHandler Cleanup] Component is unmounting!\");\r\n    };\r\n    }, [isAuthenticated, instance, loginAttempted, setToken]);\r\n//#, setIsSessionReady\r\n\r\n    return <>{children}</>;\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useSearchParams } from \"react-router-dom\";\r\nimport { getToken, useLogin, msalInstance } from \"./authConfig\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport type { InitialAnswerRaw } from \"./api/models\"; // 必要な型はこれだけになります\r\nimport styles from \"./pages/chat/Chat.module.css\";\r\n\r\nconst ChatWrapper = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [searchParams] = useSearchParams();\r\n    const [initialAnswers, setInitialAnswers] = useState<InitialAnswerRaw[] | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const { accounts } = useMsal();\r\n    const historyBoxId = searchParams.get('historyBoxId');\r\n\r\n    useEffect(() => {\r\n        const fetchChatDetail = async () => {\r\n            if (!id || accounts.length === 0) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n            try {\r\n                const client = useLogin ? msalInstance : undefined;\r\n                const token = client ? await getToken(client) : undefined;\r\n\r\n                const response = await fetch(`/api/history/${id}/?historyBoxId=${historyBoxId}`, {\r\n                    headers: { 'Authorization': `Bearer ${token}` }\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    const errorBody = await response.text();\r\n                    throw new Error(`API returned ${response.status}: ${errorBody}`);\r\n                }\r\n\r\n                const data: InitialAnswerRaw[] = await response.json();\r\n                setInitialAnswers(data.reverse());\r\n\r\n            } catch (e) {\r\n                console.error(\"fetchChatDetailでエラーをキャッチ:\", e);\r\n                setInitialAnswers(null);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchChatDetail();\r\n    }, [id, accounts]);\r\n\r\n    if (loading) {\r\n    return (\r\n        <div className={styles[\"spinner-container\"]}>\r\n            <div className={styles.spinner}></div>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    if (!initialAnswers) return <div>チャットが見つかりません</div>;\r\n\r\n    // ★★★★★★★★★★★★★★★★★★★★★★★★★\r\n    // ★ ここのpropsも修正します ★\r\n    // ★★★★★★★★★★★★★★★★★★★★★★★★★\r\n    return <Chat initialAnswers={initialAnswers} targetId={id} historyBoxId={historyBoxId} />;\r\n};\r\n\r\nexport default ChatWrapper;","// index.tsx または main.tsx\n\nimport React from 'react';\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { EventType, InteractionType, EventMessage, AuthenticationResult } from \"@azure/msal-browser\";\nimport { MsalProvider, MsalAuthenticationTemplate } from \"@azure/msal-react\";\n\nimport \"./index.css\";\nimport Chat from \"./pages/chat/Chat\";\nimport LayoutWrapper from \"./layoutWrapper\";\nimport i18next from \"./i18n/config\";\nimport { AuthHandler } from \"./AuthHandler\";\nimport { msalInstance, loginRequest } from './authConfig';\nimport { AuthProvider } from './AuthContext';\nimport ChatWrapper from \"./ChatWrapper\";\n\n// ルーターの定義\nconst router = createHashRouter([\n  {\n    path: \"/\",\n    element: (\n      <MsalAuthenticationTemplate\n        interactionType={InteractionType.Redirect}\n        authenticationRequest={loginRequest}\n      >\n        <LayoutWrapper />\n      </MsalAuthenticationTemplate>\n    ),\n    children: [\n      {\n        index: true,\n        element: (\n          <AuthHandler>\n            <Chat />\n          </AuthHandler>\n        ),\n      },\n      {\n        path: \"chat/:id\",\n        element: (\n          <AuthHandler>\n            <ChatWrapper />\n          </AuthHandler>\n        ),\n      },\n    ],\n  },\n\n  // ✅ ChatWrapper を個別のルートで追加\n//   {\n//     path: \"chat/:id\",\n//     element: (\n//       <AuthHandler>\n//         <ChatWrapper />\n//       </AuthHandler>\n//     ),\n//   },\n]);\n\n// ★★★ 修正点 ★★★\n// アプリケーションを起動するための非同期関数を定義します\nasync function main() {\n    // 1. MSALインスタンスの初期化を待ちます (これが抜けていました)\n    await msalInstance.initialize();\n\n    // イベントコールバックの設定\n    msalInstance.addEventCallback((event: EventMessage) => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n            const payload = event.payload as AuthenticationResult;\n            if (payload.account) {\n                msalInstance.setActiveAccount(payload.account);\n            }\n        }\n    });\n\n    // 2. リダイレクト処理を待ちます\n    await msalInstance.handleRedirectPromise();\n\n    // 3. 全てのMSAL処理が終わった後に、Reactアプリをレンダリングします\n    initializeIcons();\n    ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n        <React.StrictMode>\n            <MsalProvider instance={msalInstance}>\n                <AuthProvider>\n                    <I18nextProvider i18n={i18next}>\n                        <HelmetProvider>\n                            <RouterProvider router={router} />\n                        </HelmetProvider>\n                    </I18nextProvider>\n                </AuthProvider>\n            </MsalProvider>\n        </React.StrictMode>\n    );\n}\n\n// 非同期関数を実行してアプリを起動\nmain().catch(error => {\n    console.error(\"アプリケーションの初期化中にエラーが発生しました:\", error);\n});"],"names":["appLogo","getCookie","name","cookieValue","cookies","i","cookie","chatApi","request","token","headers","saveConversationToDb","data","apiEndpoint","response","errorData","error","RetrievalMode","GPT4VInput","VectorFields","isCitationValid","contextDataPoints","citationCandidate","dataPointsArray","dataPoint","parseAnswerToHtml","answer","isStreaming","citations","parsedAnswer","lastIndex","part","index","citationIndex","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","Answer","speechConfig","isSelected","onCitationClicked","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","useMemo","t","useTranslation","sanitizedAnswerHtml","DOMPurify","copied","setCopied","useState","handleCopy","textToCopy","err","jsxs","Stack","styles","IconButton","ReactMarkdown","rehypeRaw","remarkGfm","x","AnswerLoading","i18n","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","LoginContext","createContext","_","TENANTID","CLIENTID","appServicesAuthLogoutUrl","fetchAuthSetup","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","appServicesLogout","checkLoggedIn","client","msalConfig","msalInstance","PublicClientApplication","getToken","r","getUsername","activeAccount","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","chatMessageStreamEnd","question","setQuestion","loggedIn","useContext","isComposing","setIsComposing","useEffect","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","UserChatMessage","message","id","ClearChatButton","className","onClick","Delete24Regular","SidebarMenu","navigate","useNavigate","onSelectChat","clickedItem","history","item","historyBoxIdToPass","isMenuOpen","setIsMenuOpen","usageCount","setUsageCount","isLoading","setIsLoading","setError","setHistory","isHistoryLoading","setIsHistoryLoading","historyError","setHistoryError","accounts","useMsal","selectedChatId","setSelectedChatId","isChatLoading","setIsChatLoading","fetchUsageCount","useCallback","userId","params","dbToken","e","fetchHistory","onHamburgerClick","UsageDisplay","handleNewChat","Fragment","AuthContext","useAuthToken","AuthProvider","children","setToken","SimpleModal","visible","title","onOk","Chat","initialAnswers","targetId","historyBoxId","localHistoryBoxId","setLocalHistoryBoxId","newId","uuidv4","lastQuestionRef","useRef","answers","setAnswers","transformedHistory","answerObject","scrollToId","setScrollToId","isConfigPanelOpen","setIsConfigPanelOpen","isHistoryPanelOpen","setIsHistoryPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrieveCount","setRetrieveCount","maxSubqueryCount","setMaxSubqueryCount","resultsMergeStrategy","setResultsMergeStrategy","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","useQueryRewriting","setUseQueryRewriting","reasoningEffort","setReasoningEffort","streamingEnabled","setStreamingEnabled","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","includeCategory","setIncludeCategory","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFields","setVectorFields","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","useGPT4V","setUseGPT4V","setIsStreaming","activeCitation","setActiveCitation","selectedAnswer","setSelectedAnswer","speechUrls","setSpeechUrls","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showQueryRewritingOption","setShowQueryRewritingOption","showReasoningEffortOption","setShowReasoningEffortOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","showSpeechInput","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","showChatHistoryBrowser","setShowChatHistoryBrowser","showChatHistoryCosmos","setShowChatHistoryCosmos","showAgenticRetrievalOption","setShowAgenticRetrievalOption","useAgenticRetrieval","setUseAgenticRetrieval","audio","isPlaying","setIsPlaying","instance","modalVisible","setModalVisible","modalContent","setModalContent","hideModal","makeApiRequest","initialResponse","newTurn","prevAnswers","turn","saveConversation","tenantId","conversationId","errorBody","finalAnswer","reader","decoder","partialData","value","done","dataBlocks","block","jsonString","event","newAnswers","lastAnswer","parsedResponse","historyForManager","clearChat","useLayoutEffect","targetTurn","element","Helmet","Sidebarmenu","isLastAnswer","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","DefaultButton","Layout","menuOpen","setMenuOpen","menuRef","toggleMenu","handleClickOutside","Link","NavLink","isActive","Outlet","LayoutWrapper","EventType","account","MsalProvider","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","daTranslation","enTranslation","esTranslation","frTranslation","jaTranslation","nlTranslation","ptBRTranslation","trTranslation","itTranslation","AuthHandler","isAuthenticated","useIsAuthenticated","loginAttempted","setLoginAttempted","msalTokenResponse","InteractionRequiredAuthError","tokenResponse","ChatWrapper","useParams","searchParams","useSearchParams","setInitialAnswers","loading","setLoading","router","createHashRouter","MsalAuthenticationTemplate","InteractionType","main","payload","initializeIcons","ReactDOM","React","I18nextProvider","HelmetProvider","RouterProvider"],"mappings":"2tCAAA,MAAAA,GAAe,8wDCUf,SAASC,GAAUC,EAA6B,CAC5C,IAAIC,EAAc,KAClB,GAAI,SAAS,QAAU,SAAS,SAAW,GAAI,CAC3C,MAAMC,EAAU,SAAS,OAAO,MAAM,GAAG,EACzC,QAASC,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IAAK,CACrC,MAAMC,EAASF,EAAQC,CAAC,EAAE,KAAA,EAE1B,GAAIC,EAAO,UAAU,EAAGJ,EAAK,OAAS,CAAC,IAAOA,EAAO,IAAM,CACvDC,EAAc,mBAAmBG,EAAO,UAAUJ,EAAK,OAAS,CAAC,CAAC,EAClE,KACJ,CACJ,CACJ,CACA,OAAOC,CACX,CAEA,eAAsBI,GAAQC,EAAyBC,EAAyC,CAG5F,MAAMC,EAAU,CACZ,eAAgB,mBAChB,cAHcT,GAAU,WAAW,GAGP,GAC5B,GAAIQ,EAAQ,CAAE,cAAe,UAAUA,CAAK,IAAO,CAAA,CAAC,EAGxD,OAAO,MAAM,MAAM,aAAc,CAC7B,OAAQ,OACR,YAAa,UACb,QAAAC,EACA,KAAM,KAAK,UAAUF,CAAO,CAAA,CAC/B,CACL,CAqBA,eAAsBG,GAAqBC,EAAwBH,EAA0C,CAEzG,MAAMI,EAAc,gBAGpB,GAAI,CAACJ,EAAO,CACR,QAAQ,KAAK,0CAA0C,EACvD,MACJ,CAEA,GAAI,CACA,MAAMK,EAAW,MAAM,MAAMD,EAAa,CACtC,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAUJ,CAAK,EAAA,EAEpC,KAAM,KAAK,UAAUG,CAAI,CAAA,CAC5B,EAED,GAAI,CAACE,EAAS,GAAI,CAEd,QAAQ,IAAIA,CAAQ,EACpB,MAAMC,EAAY,MAAMD,EAAS,KAAA,EACjC,MAAM,IAAI,MAAMC,EAAU,SAAW,mCAAmC,CAC5E,CAEA,QAAQ,IAAI,kCAAkC,CAElD,OAASC,EAAO,CACZ,QAAQ,MAAM,6BAA8BA,CAAK,CAErD,CACJ,CC/FO,IAAWC,IAAAA,IACdA,EAAA,OAAS,SACTA,EAAA,QAAU,UACVA,EAAA,KAAO,OAHOA,IAAAA,IAAA,CAAA,CAAA,EAMAC,IAAAA,IACdA,EAAA,cAAgB,gBAChBA,EAAA,OAAS,SACTA,EAAA,MAAQ,QAHMA,IAAAA,IAAA,CAAA,CAAA,EAMAC,IAAAA,IACdA,EAAA,UAAY,oBACZA,EAAA,eAAiB,qBACjBA,EAAA,uBAAyB,yBAHXA,IAAAA,IAAA,CAAA,CAAA,yTCFlB,SAASC,GAAgBC,EAAwBC,EAAoC,CAEjF,GAAI,CADU,uBACH,KAAKA,CAAiB,EAC7B,MAAO,GAIX,IAAIC,EACJ,GAAI,MAAM,QAAQF,CAAiB,EAC/BE,EAAkBF,UACXA,GAAqB,MAAM,QAAQA,EAAkB,IAAI,EAChEE,EAAkBF,EAAkB,SAEpC,OAAO,GAOX,OAJwBE,EAAgB,KAAKC,GAClCA,EAAU,WAAWF,CAAiB,CAChD,CAGL,CAEO,SAASG,GAAkBC,EAAyBC,EAAwC,CAC/F,MAAMN,EAAoBK,EAAO,QAC3BE,EAAsB,CAAA,EAG5B,IAAIC,EAAeH,EAAO,QAAQ,QAAQ,KAAA,EAG1C,GAAIC,EAAa,CACb,IAAIG,EAAYD,EAAa,OAC7B,QAASxB,EAAIwB,EAAa,OAAS,EAAGxB,GAAK,GACnCwB,EAAaxB,CAAC,IAAM,IADkBA,IAG1C,GAAWwB,EAAaxB,CAAC,IAAM,IAAK,CAChCyB,EAAYzB,EACZ,KACJ,CAGJwB,EADwBA,EAAa,UAAU,EAAGC,CAAS,CAE/D,CA6BA,MAAO,CACH,WA5BUD,EAAa,MAAM,eAAe,EAEd,IAAI,CAACE,EAAMC,IAAU,CACnD,GAAIA,EAAQ,IAAM,EACd,OAAOD,EACJ,CACH,IAAIE,EAEJ,OAAKb,GAAgBC,EAAmBU,CAAI,GAIxCH,EAAU,QAAQG,CAAI,IAAM,GAC5BE,EAAgBL,EAAU,QAAQG,CAAI,EAAI,GAE1CH,EAAU,KAAKG,CAAI,EACnBE,EAAgBL,EAAU,QAGvBM,GACHC,EAAAA,IAAC,KAAE,UAAU,eAAe,MAAOJ,EAC/B,SAAAI,EAAAA,IAAC,MAAA,CAAK,SAAAF,CAAA,CAAc,CAAA,CACxB,CAAA,GAbO,IAAIF,CAAI,GAevB,CACJ,CAAC,EAGyB,KAAK,EAAE,EAC7B,UAAAH,CAAA,CAER,CCnFO,MAAMQ,GAAa,UACdC,GAAA,CAAgB,YAAa,yBAA0B,cAAY,OAAO,aAAW,cAAc,ECyBlGC,GAAS,CAAC,CACnB,OAAAZ,EACA,MAAAM,EACA,aAAAO,EACA,WAAAC,EACA,YAAAb,EACA,kBAAAc,EACA,wBAAAC,EACA,2BAAAC,EACA,0BAAAC,EACA,sBAAAC,EACA,sBAAAC,EACA,wBAAAC,CACJ,IAAa,CACiBrB,EAAO,QACjC,MAAMG,EAAemB,EAAAA,QAAQ,IAAMvB,GAAkBC,EAAQC,CAAW,EAAG,CAACD,CAAM,CAAC,EAC7E,CAAE,EAAAuB,CAAA,EAAMC,EAAA,EACRC,EAAsBC,GAAU,SAASvB,EAAa,UAAU,EAChE,CAACwB,EAAQC,CAAS,EAAIC,EAAAA,SAAS,EAAK,EAEpCC,EAAa,IAAM,CAErB,MAAMC,EAAaN,EAAoB,QAAQ,yCAA0C,EAAE,EAE3F,UAAU,UACL,UAAUM,CAAU,EACpB,KAAK,IAAM,CACRH,EAAU,EAAI,EACd,WAAW,IAAMA,EAAU,EAAK,EAAG,GAAI,CAC3C,CAAC,EACA,MAAMI,GAAO,QAAQ,MAAM,wBAAyBA,CAAG,CAAC,CACjE,EAEA,OACIC,EAAAA,KAACC,EAAA,CAAM,UAAW,GAAGC,EAAO,eAAe,IAAIrB,GAAcqB,EAAO,QAAQ,GAAI,cAAc,gBAC1F,SAAA,CAAA1B,EAAAA,IAACyB,EAAM,KAAN,CACG,SAAAD,EAAAA,KAACC,GAAM,WAAU,GAAC,gBAAgB,gBAC9B,SAAA,CAAAzB,EAAAA,IAACC,GAAA,EAAW,QACX,MAAA,CACG,SAAAD,EAAAA,IAAC2B,GAAA,CACG,MAAO,CAAE,MAAO,OAAA,EAChB,UAAW,CAAE,SAAUT,EAAS,YAAc,MAAA,EAC9C,MAAgBJ,EAATI,EAAW,kBAAuB,eAAN,EACnC,UAAoBJ,EAATI,EAAW,kBAAuB,eAAN,EACvC,QAASG,CAAA,CAAA,CACb,CACJ,CAAA,CAAA,CACJ,CAAA,CACJ,EAEArB,EAAAA,IAACyB,EAAM,KAAN,CAAW,KAAI,GACZ,SAAAzB,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,WACnB,SAAA1B,EAAAA,IAAC4B,IAAc,SAAUZ,EAAqB,cAAe,CAACa,EAAS,EAAG,cAAe,CAACC,EAAS,EAAG,CAAA,CAC1G,CAAA,CACJ,EAEC,CAAC,CAACpC,EAAa,UAAU,QACtBM,EAAAA,IAACyB,EAAM,KAAN,CACG,gBAACA,EAAA,CAAM,WAAU,GAAC,KAAI,GAAC,OAAQ,CAAE,YAAa,GAC1C,SAAA,CAAAzB,MAAC,QAAK,UAAW0B,EAAO,kBAAoB,SAAAZ,EAAE,mBAAmB,EAAE,EAClEpB,EAAa,UAAU,IAAI,CAACqC,EAAG7D,IAExB8B,EAAAA,IAAC,IAAA,CAAU,UAAW0B,EAAO,SAAU,MAAOK,EACzC,SAAA,GAAG,EAAE7D,CAAC,KAAK6D,CAAC,IADT7D,CAER,CAEP,CAAA,CAAA,CACL,CAAA,CACJ,CAAA,EAiBR,CAER,EC5Ga8D,GAAgB,IAAM,CAC/B,KAAM,CAAE,EAAG,KAAAC,CAAA,EAASlB,EAAA,EACdmB,EAAiBC,GAAU,CAC7B,KAAM,CAAE,QAAS,CAAA,EACjB,GAAI,CAAE,QAAS,CAAA,CAAE,CACpB,EAED,OACInC,EAAAA,IAACoC,GAAS,IAAT,CAAa,MAAO,CAAE,GAAGF,GACtB,gBAACT,EAAA,CAAM,UAAWC,EAAO,gBAAiB,cAAc,gBACpD,SAAA,CAAA1B,EAAAA,IAACC,GAAA,EAAW,EACZD,EAAAA,IAACyB,EAAM,KAAN,CAAW,KAAI,GACZ,SAAAD,EAAAA,KAAC,IAAA,CAAE,UAAWE,EAAO,WAChB,SAAA,CAAA,EAAE,kBAAkB,EACrB1B,EAAAA,IAAC,OAAA,CAAK,UAAW0B,EAAO,WAAA,CAAa,CAAA,CAAA,CACzC,CAAA,CACJ,CAAA,CAAA,CACJ,CAAA,CACJ,CAER,ECjBaW,GAAc,CAAC,CAAE,MAAAxD,EAAO,QAAAyD,YAE5Bb,EAAA,CAAM,UAAWC,EAAO,gBAAiB,cAAc,gBACpD,SAAA,CAAA1B,MAACuC,IAAqB,cAAY,OAAO,aAAW,aAAa,YAAY,MAAM,EAEnFvC,EAAAA,IAACyB,EAAM,KAAN,CAAW,KAAI,GACZ,SAAAzB,EAAAA,IAAC,IAAA,CAAE,UAAW0B,EAAO,WAAa,SAAA7C,CAAA,CAAM,EAC5C,EAEAmB,MAACwC,IAAc,UAAWd,EAAO,YAAa,QAASY,EAAS,KAAK,OAAA,CAAQ,CAAA,EACjF,kNCZKG,EAAeC,EAAAA,cAAc,CACtC,SAAU,GACV,YAAcC,GAAe,CAAC,CAClC,CAAC,ECRKC,GAAW,uCACXC,GAAW,uCAGXC,GAA2B,0CAkCjC,eAAeC,IAAqC,CAChD,MAAMpE,EAAW,MAAM,MAAM,iBAAiB,EAC9C,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAM,mCAAmCA,EAAS,MAAM,EAAE,EAExE,OAAO,MAAMA,EAAS,KAAA,CAC1B,CAEA,MAAMqE,EAAY,MAAMD,GAAA,EAEXE,EAAWD,EAAU,SACrBE,GAAuBF,EAAU,qBACjCG,GAA8BH,EAAU,4BACxCI,GAAeF,IAAwB,CAACC,GACxCE,GAAe,CACxB,OAAQ,CAAC,0DAAkC,CAC/C,EAGMC,GAAeN,EAAU,aAElBO,GAAiB,IACnBP,EAAU,WAAW,KAAK,YAMrC,WAAW,uBAAyB,KASpC,MAAMQ,GAAsB,IAAwC,CAChE,MAAMC,EAAmBC,GAAuC,CAC5D,MAAMC,MAAkB,KAExB,OADsB,IAAI,KAAKD,EAAiB,UAAU,EACnCC,CAC3B,EAEA,OAAI,WAAW,wBAA0BF,EAAgB,WAAW,sBAAsB,EAC/E,QAAQ,QAAQ,WAAW,sBAAsB,EAErD,QAAQ,QAAQ,IAAI,CAC/B,EAEwC,MAAMD,MAA0B,KAEjE,MAAMI,GAAoB,IAAM,CACnC,OAAO,SAAS,KAAOd,EAC3B,EAOae,GAAgB,MAAOC,GAC5B,GAAAA,GACsBA,EAAO,iBAAA,GAMR,MAAMN,GAAA,GAQtBO,GAA4B,CACrC,KAAM,CACF,SAAUlB,GACV,UAAW,qCAAqCD,EAAQ,GACxD,YAAa,wBACb,0BAA2B,EAAA,EAE/B,MAAO,CACH,cAAe,iBACf,uBAAwB,EAAA,CAEhC,EACaoB,EAAe,IAAIC,GAAwBF,EAAU,EAKrDG,EAAW,MAAOJ,GAAkE,CAC7F,MAAMJ,EAAmB,MAAMF,GAAA,EAC/B,OAAIE,EACO,QAAQ,QAAQA,EAAiB,YAAY,EAEjDI,EACF,mBAAmB,CAChB,GAAGR,GACH,YAAaC,GAAA,CAAe,CAC/B,EACA,KAAKY,GAAKA,EAAE,WAAW,EACvB,MAAMtF,GAAS,CACZ,QAAQ,IAAIA,CAAK,CAErB,CAAC,CACT,EAQauF,GAAc,MAAON,GAA6D,CAC3F,MAAMO,EAAgBP,EAAO,iBAAA,EAC7B,GAAIO,EACA,OAAOA,EAAc,SAGzB,MAAMX,EAAmB,MAAMF,GAAA,EAC/B,OAAIE,GAAkB,YACXA,EAAiB,YAAY,mBAGjC,IACX,ECtJaY,GAAgB,CAAC,CAAE,OAAAC,EAAQ,SAAAC,EAAU,YAAAC,EAAa,YAAAC,EAAa,aAAAC,EAAc,qBAAAC,KAAkC,CACxH,KAAM,CAACC,EAAUC,CAAW,EAAI1D,EAAAA,SAAiB,EAAE,EAC7C,CAAE,SAAA2D,CAAA,EAAaC,EAAAA,WAAWvC,CAAY,EACtC,CAAE,EAAA3B,CAAA,EAAMC,EAAA,EACR,CAACkE,EAAaC,CAAc,EAAI9D,EAAAA,SAAS,EAAK,EAEpD+D,EAAAA,UAAU,IAAM,CACZR,GAAgBG,EAAYH,CAAY,CAC5C,EAAG,CAACA,CAAY,CAAC,EAEjB,MAAMS,EAAe,IAAM,CACnBZ,GAAY,CAACK,EAAS,SAI1BN,EAAOM,CAAQ,EAEXH,GACAI,EAAY,EAAE,EAIlB,WAAW,IAAM,CACbF,EAAqB,SAAS,eAAe,CAAE,SAAU,SAAU,CACvE,EAAG,EAAE,EACT,EAEMS,EAAgBC,GAAqC,CACnDL,GAEAK,EAAG,MAAQ,SAAW,CAACA,EAAG,WAC1BA,EAAG,eAAA,EACHF,EAAA,EAER,EAEMG,EAAyB,IAAM,CACjCL,EAAe,EAAI,CACvB,EACMM,EAAuB,IAAM,CAC/BN,EAAe,EAAK,CACxB,EAEMO,EAAmB,CAACC,EAA8DC,IAAsB,CACrGA,EAEMA,EAAS,QAAU,KAC1Bb,EAAYa,CAAQ,EAFpBb,EAAY,EAAE,CAItB,EAEMc,EAA+BxC,IAAgB,CAAC2B,EAChDc,EAAuBrB,GAAY,CAACK,EAAS,QAAUe,EAE7D,OAAIA,IACAnB,EAAc,sCAIbhD,EAAA,CAAM,WAAU,GAAC,UAAWC,GAAO,uBAChC,SAAA,CAAA1B,EAAAA,IAAC8F,GAAA,CACG,UAAWpE,GAAO,sBAClB,SAAUkE,EACV,YAAAnB,EACA,UAAS,GACT,UAAW,GACX,WAAU,GACV,MAAOI,EACP,SAAUY,EACV,UAAWJ,EACX,mBAAoBE,EACpB,iBAAkBC,CAAA,CAAA,EAEtBxF,EAAAA,IAAC,MAAA,CAAI,UAAW0B,GAAO,8BACnB,SAAA1B,EAAAA,IAAC+F,GAAA,CAAQ,QAASjF,EAAE,yBAAyB,EAAG,aAAa,QACzD,SAAAd,EAAAA,IAACgG,GAAA,CAAO,KAAK,QAAQ,KAAMhG,EAAAA,IAACiG,GAAA,CAAa,YAAY,wBAAA,CAAyB,EAAI,SAAUJ,EAAsB,QAAST,CAAA,CAAc,CAAA,CAC7I,CAAA,CACJ,CAAA,EACJ,CAER,6EClGac,GAAkB,CAAC,CAAE,QAAAC,EAAS,GAAAC,KAInCpG,MAAC,MAAA,CAAI,UAAW0B,GAAO,UAAW,GAAI,WAAW0E,CAAE,GAG/C,eAAC,MAAA,CAAI,UAAW1E,GAAO,QAClB,WACL,CAAA,CAEJ,4CCDK2E,GAAkB,CAAC,CAAE,UAAAC,EAAW,SAAA9B,EAAU,QAAA+B,KAAqB,CACxE,KAAM,CAAE,EAAAzF,EAAG,KAAAmB,CAAA,EAASlB,EAAA,EACpB,OACIf,MAAC,OAAI,UAAW,GAAG0B,GAAO,SAAS,IAAI4E,GAAa,EAAE,GAClD,eAACN,GAAA,CAAO,WAAOQ,GAAA,CAAA,CAAgB,EAAI,SAAAhC,EAAoB,QAAA+B,EAClD,SAAAzF,EAAE,WAAW,CAAA,CAClB,CAAA,CACJ,CAER,ECXM2F,GAA+B,IAAM,CACzC,MAAMC,EAAWC,GAAA,EACXC,EAAgBR,GAAe,CAEjC,MAAMS,EAAcC,GAAS,KAAMC,GAAcA,EAAK,KAAOX,CAAE,EAG/D,GAAI,CAACS,EAAa,CACd,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CACA,MAAMG,EAAqBH,EAAY,aAEvC,QAAQ,IAAI,0BAA2BA,CAAW,EAClD,QAAQ,IAAI,2BAA4BG,CAAkB,EAG1DN,EAAS,SAASG,EAAY,EAAE,iBAAiBG,CAAkB,EAAE,CACzE,EACM,CAACC,EAAYC,CAAa,EAAI9F,EAAAA,SAAS,EAAK,EAE5C,CAAC+F,EAAYC,CAAa,EAAIhG,EAAAA,SAA+B,IAAI,EACjE,CAACiG,EAAWC,CAAY,EAAIlG,EAAAA,SAAS,EAAI,EACzC,CAACvC,EAAO0I,CAAQ,EAAInG,EAAAA,SAAwB,IAAI,EAEhD,CAAC0F,EAASU,CAAU,EAAIpG,EAAAA,SAAwC,MAAS,EACzE,CAACqG,EAAkBC,CAAmB,EAAItG,EAAAA,SAAS,EAAI,EACvD,CAACuG,EAAcC,CAAe,EAAIxG,EAAAA,SAAwB,IAAI,EAE9D,CAAE,SAAU4C,EAAc,SAAA6D,CAAA,EAAaC,EAAA,EACvChE,EAASb,EAAWe,EAAe,OAEnC,CAAC+D,EAAgBC,CAAiB,EAAI5G,EAAAA,SAAwB,IAAI,EAOlE,CAAC6G,GAAeC,EAAgB,EAAI9G,EAAAA,SAAS,EAAK,EAGlD+G,GAAkBC,EAAAA,YAAY,SAAY,CAC9C,GAAIP,EAAS,SAAW,EAAG,CACzBN,EAAS,YAAY,EACrBD,EAAa,EAAK,EAClB,MACF,CAEA,GAAI,CACFA,EAAa,EAAI,EACjBI,EAAoB,EAAI,EACxB,MAAMW,EAASR,EAAS,CAAC,EAAE,SACrBS,EAAS,IAAI,gBAAgB,CAAE,OAAAD,EAAQ,EAC7C,QAAQ,IAAI,WAAYC,CAAM,EAC9B,MAAMC,EAAUzE,EAAS,MAAMI,EAASJ,CAAM,EAAI,OAE5CnF,EAAW,MAAM,MAAM,oBAAoB2J,CAAM,GAAI,CACzD,OAAQ,MACR,QAAS,CACP,cAAe,UAAUC,CAAO,GAChC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAAC5J,EAAS,GAAI,MAAM,IAAI,MAAM,YAAYA,EAAS,MAAM,EAAE,EAE/D,MAAMF,EAAsB,MAAME,EAAS,KAAA,EAC3CyI,EAAc3I,CAAI,EAClB8I,EAAS,IAAI,CACf,OAASiB,EAAG,CACV,MAAMrC,EAAUqC,aAAa,MAAQA,EAAE,QAAU,SACjDjB,EAASpB,CAAO,EAChB,QAAQ,MAAM,4BAA6BqC,CAAC,CAC9C,QAAA,CACElB,EAAa,EAAK,CACpB,CACF,EAAG,CAACO,CAAQ,CAAC,EAKPY,GAAeL,EAAAA,YAAY,SAAY,CAC3C,GAAIP,EAAS,SAAW,EAAG,CACzBD,EAAgB,YAAY,EAC5BF,EAAoB,EAAK,EACzB,MACF,CAEA,GAAI,CACFA,EAAoB,EAAI,EACxB,MAAMW,EAASR,EAAS,CAAC,EAAE,SAC3B,GAAI,CAACQ,EAAQ,MAAM,IAAI,MAAM,wBAAwB,EAErD,MAAMC,EAAS,IAAI,gBAAgB,CAAE,OAAAD,EAAQ,EAC7C,QAAQ,IAAI,WAAYC,CAAM,EAC9B,MAAMC,EAAUzE,EAAS,MAAMI,EAASJ,CAAM,EAAI,OAE5CnF,EAAW,MAAM,MAAM,iBAAiB2J,CAAM,GAAI,CACtD,OAAQ,MACR,QAAS,CACP,cAAe,UAAUC,CAAO,GAChC,eAAgB,kBAAA,CAClB,CACD,EAED,GAAI,CAAC5J,EAAS,GAAI,MAAM,IAAI,MAAM,YAAYA,EAAS,MAAM,EAAE,EAE/D,MAAMF,EAA0B,MAAME,EAAS,KAAA,EAC/C,QAAQ,IAAI,iDAAkDF,CAAI,EAClE+I,EAAW/I,CAAI,EACfmJ,EAAgB,IAAI,CACtB,OAASY,EAAG,CACV,MAAMrC,EAAUqC,aAAa,MAAQA,EAAE,QAAU,SACjDZ,EAAgBzB,CAAO,EACvB,QAAQ,MAAM,wBAAyBqC,CAAC,CAC1C,QAAA,CACEd,EAAoB,EAAK,CAC3B,CACF,EAAG,CAACG,EAAU/D,CAAM,CAAC,EAEb4E,GAAmB,IAAM,CAC/BxB,EAAc,CAACD,CAAU,EACzBkB,GAAA,EACAM,GAAA,CACF,EAGME,GAAyB,IACxBxB,EAGH3F,EAAAA,KAAC,MAAA,CAAI,UAAU,gBACb,SAAA,CAAAxB,EAAAA,IAAC,QAAK,SAAA,UAAA,CAAQ,SACb,SAAA,CAAO,MAAO,CAAE,WAAY,OAC1B,SAAA,CAAAmH,EAAW,OAAS,EAAE,MAAIA,EAAW,KAAA,CAAA,CACxC,CAAA,EACF,QARuB,MAAA,CAAI,UAAU,sBAAsB,SAAA,MAAG,EAY5DyB,GAAgB,IAAM,CAC1BlC,EAAS,GAAG,EACZQ,EAAc,EAAK,CACrB,EAGA,OACE1F,EAAAA,KAAAqH,WAAA,CACE,SAAA,CAAA7I,EAAAA,IAAC,MAAA,CAAI,UAAW,WAAWiH,EAAa,SAAW,EAAE,GAAI,QAAS,IAAMC,EAAc,EAAK,CAAA,CAAG,EAE9F1F,EAAAA,KAAC,SAAA,CACC,UAAU,iBACV,aAAW,UACX,QAASkH,GAET,SAAA,CAAA1I,EAAAA,IAAC,OAAA,EAAK,QAAQ,OAAA,EAAK,QAAQ,OAAA,CAAA,CAAK,CAAA,CAAA,CAAA,SAGjC,MAAA,CAAI,UAAW,WAAWiH,EAAa,OAAS,EAAE,GACjD,SAAA,CAAAjH,EAAAA,IAAC,MAAA,CAAI,UAAU,iBACb,SAAAA,EAAAA,IAAC,SAAA,CAAO,UAAU,kBAAkB,QAAS4I,GAAe,SAAA,YAAA,CAAU,EACxE,QAEC,KAAA,CAAG,UAAU,eACb,SAAAnB,EACCzH,MAAC,MAAG,SAAA,UAAA,CAAQ,EACV,MAAM,QAAQ8G,CAAO,GAAKA,EAAQ,OAAS,EAC7CA,EAAQ,IAAKC,GACX/G,EAAAA,IAAC,KAAA,CAEC,SAAAA,MAAC,UAAO,UAAU,sBAAsB,QAAS,IAAM4G,EAAaG,EAAK,EAAE,EACxE,WAAK,KAAA,CACR,CAAA,EAJOA,EAAK,EAKd,CACD,EAED/G,MAAC,KAAA,CAAG,wBAAY,CAAA,CAElB,QAEC,MAAA,CAAI,UAAU,iBACb,SAAAA,EAAAA,IAAC2I,KAAa,CAAA,CAChB,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,ECnMMG,GAAcpG,EAAAA,cAA2E,CAC7F,MAAO,KACP,SAAU,IAAM,CAAC,CACnB,CAAC,EAEYqG,GAAe,IAAM/D,EAAAA,WAAW8D,EAAW,EAE3CE,GAAe,CAAC,CAAE,SAAAC,KAA8C,CAC3E,KAAM,CAAC3K,EAAO4K,CAAQ,EAAI9H,EAAAA,SAAwB,IAAI,EAEtD,OACEpB,EAAAA,IAAC8I,GAAY,SAAZ,CAAqB,MAAO,CAAE,MAAAxK,EAAO,SAAA4K,GACnC,SAAAD,EACH,CAEJ,ECVME,GAA0C,CAAC,CAAE,QAAAC,EAAS,MAAAC,EAAO,KAAAC,KAC5DF,EAGHpJ,EAAAA,IAAC,MAAA,CAAI,UAAU,iBAAiB,MAAO,CACrC,SAAU,QACV,IAAK,EAAG,KAAM,EAAG,MAAO,EAAG,OAAQ,EACnC,gBAAiB,kBACjB,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,OAAQ,IAAA,EAER,SAAAwB,EAAAA,KAAC,MAAA,CAAI,UAAU,QAAQ,MAAO,CAC5B,WAAY,QACZ,QAAS,OACT,aAAc,MACd,SAAU,QACV,MAAO,MACP,UAAW,4BACX,UAAW,QAAA,EAEX,SAAA,CAAAxB,EAAAA,IAAC,MAAI,SAAAqJ,CAAA,CAAM,EACXrJ,EAAAA,IAAC,SAAA,CACC,QAAS,IAAMsJ,IAAA,EACf,MAAO,CACL,UAAW,OACX,QAAS,WACT,SAAU,OACV,OAAQ,SAAA,EAEX,SAAA,IAAA,CAAA,CAED,CAAA,CACF,CAAA,CACF,EAlCmB,KCoCjBC,GAAO,CAAC,CAAE,eAAAC,EAAgB,SAAAC,EAAU,aAAAC,KAA8B,CACpE,KAAM,CAACC,EAAmBC,CAAoB,EAAIxI,EAAAA,SAAwBsI,GAAgB,IAAI,EAC9FvE,EAAAA,UAAU,IAAM,CACZ,GAAI,CAACwE,EAAmB,CAExB,MAAME,EAAQC,GAAA,EACdF,EAAqBC,CAAK,CAC1B,CACJ,EAAG,CAACF,CAAiB,CAAC,EACtB,MAAMI,EAAkBC,EAAAA,OAAe,EAAE,EACnC,CAACC,EAASC,CAAU,EAAI9I,EAAAA,SAA6B,IAAM,CAEzD,GAAIoI,GAAkBA,EAAe,OAAS,EAAG,CAE7C,MAAMW,EAAqBX,EAAe,IAAIzC,GAAQ,CAClD,MAAMqD,EAAgC,CAClC,QAAS,CAAE,QAASrD,EAAK,OAAQ,KAAM,WAAA,EACvC,QAAS,CAAE,YAAa,CAAA,EAAI,mBAAoB,CAAA,EAAI,SAAU,EAAC,EAC/D,cAAe,KACf,MAAO,IAAA,EAEX,MAAO,CACH,GAAIA,EAAK,IAAM+C,GAAA,EACf,SAAU/C,EAAK,SACf,OAAQqD,CAAA,CAEhB,CAAC,EACD,OAAAL,EAAgB,QAAU,OACnBI,CACX,CAGA,MAAO,CAAA,CACX,CAAC,EACD,QAAQ,KAAKF,CAAO,EAExB,KAAM,CAACI,EAAYC,CAAa,EAAIlJ,EAAAA,SAAwB,IAAI,EAC1D,CAACmJ,EAAmBC,CAAoB,EAAIpJ,EAAAA,SAAS,EAAK,EAC1D,CAACqJ,EAAoBC,CAAqB,EAAItJ,EAAAA,SAAS,EAAK,EAC5D,CAACuJ,EAAgBC,CAAiB,EAAIxJ,EAAAA,SAAiB,EAAE,EACzD,CAACyJ,EAAaC,CAAc,EAAI1J,EAAAA,SAAiB,EAAG,EACpD,CAAC2J,EAAMC,CAAO,EAAI5J,EAAAA,SAAwB,IAAI,EAC9C,CAAC6J,EAAsBC,EAAuB,EAAI9J,EAAAA,SAAiB,CAAC,EACpE,CAAC+J,GAAoBC,EAAqB,EAAIhK,EAAAA,SAAiB,CAAC,EAChE,CAACiK,GAAeC,EAAgB,EAAIlK,EAAAA,SAAiB,CAAC,EACtD,CAACmK,GAAkBC,EAAmB,EAAIpK,EAAAA,SAAiB,EAAE,EAC7D,CAACqK,EAAsBC,CAAuB,EAAItK,EAAAA,SAAiB,aAAa,EAChF,CAACuK,EAAeC,CAAgB,EAAIxK,EAAAA,SAAwBtC,GAAc,OAAO,EACjF,CAAC+M,EAAmBC,EAAoB,EAAI1K,EAAAA,SAAkB,EAAI,EAClE,CAAC2K,GAAmBC,EAAoB,EAAI5K,EAAAA,SAAkB,EAAK,EACnE,CAAC6K,GAAiBC,EAAkB,EAAI9K,EAAAA,SAAiB,EAAE,EAC3D,CAAC+K,GAAkBC,EAAmB,EAAIhL,EAAAA,SAAkB,EAAI,EAChE,CAACiL,GAAcC,EAAe,EAAIlL,EAAAA,SAAkB,EAAI,EACxD,CAACmL,GAAqBC,EAAsB,EAAIpL,EAAAA,SAAkB,EAAK,EACvE,CAACqL,GAAiBC,EAAkB,EAAItL,EAAAA,SAAiB,EAAE,EAC3D,CAACuL,GAAiBC,EAAkB,EAAIxL,EAAAA,SAAiB,EAAE,EAC3D,CAACyL,GAA6BC,EAA8B,EAAI1L,EAAAA,SAAkB,EAAK,EACvF,CAAC2L,GAAcC,EAAe,EAAI5L,EAAAA,SAAuBpC,GAAa,sBAAsB,EAC5F,CAACiO,GAAsBC,EAAuB,EAAI9L,EAAAA,SAAkB,EAAK,EACzE,CAAC+L,GAAyBC,EAA0B,EAAIhM,EAAAA,SAAkB,EAAK,EAC/E,CAACiM,GAAYC,EAAa,EAAIlM,EAAAA,SAAqBrC,GAAW,aAAa,EAC3E,CAACwO,GAAUC,EAAW,EAAIpM,EAAAA,SAAkB,EAAK,EACjDwD,GAAuBoF,EAAAA,OAA8B,IAAI,EACzD,CAAC3C,GAAWC,EAAY,EAAIlG,EAAAA,SAAkB,EAAK,EACnD,CAAC5B,GAAaiO,EAAc,EAAIrM,EAAAA,SAAkB,EAAK,EACvD,CAACvC,GAAO0I,EAAQ,EAAInG,WAAA,EACpB,CAACsM,GAAgBC,EAAiB,EAAIvM,WAAA,EAEtC,CAACwM,GAAgBC,EAAiB,EAAIzM,EAAAA,SAAiB,CAAC,EACxD,CAAC0M,GAAYC,EAAa,EAAI3M,EAAAA,SAA4B,CAAA,CAAE,EAC5D,CAAC4M,GAAkBC,EAAmB,EAAI7M,EAAAA,SAAkB,EAAK,EACjE,CAAC8M,GAA0BC,EAA2B,EAAI/M,EAAAA,SAAkB,EAAK,EACjF,CAACgN,GAA0BC,EAA2B,EAAIjN,EAAAA,SAAkB,EAAK,EACjF,CAACkN,GAA2BC,EAA4B,EAAInN,EAAAA,SAAkB,EAAK,EACnF,CAACoN,GAAkBC,EAAmB,EAAIrN,EAAAA,SAAkB,EAAK,EACjE,CAACsN,GAAgBC,EAAiB,EAAIvN,EAAAA,SAAkB,EAAK,EAC7D,CAACwN,GAAoBC,EAAqB,EAAIzN,EAAAA,SAAkB,EAAK,EACrE,CAAC0N,GAAiBC,EAAkB,EAAI3N,EAAAA,SAAkB,EAAK,EAC/D,CAACR,GAAyBoO,EAA0B,EAAI5N,EAAAA,SAAkB,EAAK,EAC/E,CAACT,GAAuBsO,EAAwB,EAAI7N,EAAAA,SAAkB,EAAK,EAC3E,CAAC8N,GAAwBC,EAAyB,EAAI/N,EAAAA,SAAkB,EAAK,EAC7E,CAACgO,GAAuBC,EAAwB,EAAIjO,EAAAA,SAAkB,EAAK,EAC3E,CAACkO,GAA4BC,EAA6B,EAAInO,EAAAA,SAAkB,EAAK,EACrF,CAACoO,GAAqBC,EAAsB,EAAIrO,EAAAA,SAAkB,EAAK,EACvEsF,GAAWC,GAAA,EACX+I,GAAQ1F,EAAAA,OAAO,IAAI,KAAO,EAAE,QAC5B,CAAC2F,GAAWC,EAAY,EAAIxO,EAAAA,SAAS,EAAK,EAC1C,CAAE,SAAAyO,EAAA,EAAa/H,EAAA,EAEf,CAACgI,GAAcC,EAAe,EAAI3O,EAAAA,SAAS,EAAK,EAChD,CAAC4O,GAAcC,EAAe,EAAI7O,EAAAA,SAAS,CAAE,MAAO,GAAG,EAGvD8O,GAAY,IAAMH,GAAgB,EAAK,EACvC3P,GAA6B,CAC/B,WAAA0N,GACA,cAAAC,GACA,MAAA2B,GACA,UAAAC,GACA,aAAAC,EAAA,EAEE9L,EAASb,EAAW6E,EAAA,EAAU,SAAW,OACzC,CAAE,SAAA/C,EAAA,EAAaC,EAAAA,WAAWvC,CAAY,EAEtC,CAAE,MAAAnE,EAAA,EAAUyK,GAAA,EAEZoH,GAAiB,MAAOtL,GAAqB,CAC/CkF,EAAgB,QAAUlF,EAI1BhG,IAAS0I,GAAS,MAAS,EAC3BD,GAAa,EAAI,EACjBqG,GAAkB,MAAS,EAK3B,MAAMyC,EAAmC,CACrC,QAAS,CAAE,QAAS,GAAI,KAAM,WAAA,EAC9B,MAAO,KACP,QAAS,CAAE,YAAa,CAAA,EAAI,mBAAoB,CAAA,EAAI,SAAU,EAAC,EAC/D,cAAe,CAAA,CAAC,EAIdC,EAA4B,CAC9B,GAAIvG,GAAA,EACJ,SAAAjF,EACA,OAAQuL,CAAA,EAEZlG,EAAWoG,GAAe,CAAC,GAAGA,EAAaD,CAAO,CAAC,EAEnD,GAAI,CAGA,MAAM/R,EAAQwF,EAAS,MAAMI,EAASJ,CAAM,EAAI,OAEhD,GAAI,CADY+L,GAAS,iBAAA,EAErB,MAAM,IAAI,MAAM,mBAAmB,EAOvC,MAAMxR,GAA0B,CAC5B,SAAU,CAAC,GAHC4L,EAAQ,QAAQsG,GAAQ,CAAC,CAAE,QAASA,EAAK,SAAU,KAAM,QAAU,CAAE,QAASA,EAAK,OAAO,QAAQ,QAAS,KAAM,WAAA,CAAa,CAAC,EAGpH,CAAE,QAAS1L,EAAU,KAAM,OAAQ,EAC1D,QAAS,CACL,UAAW,CACP,gBAAiB8F,GAAkB,OACnC,iBAAkB8B,IAAmB,OACrC,iBAAkBE,IAAmB,OACrC,IAAKtB,GACL,eAAgBE,GAChB,uBAAwBE,EACxB,YAAAZ,EACA,uBAAwBI,EACxB,qBAAsBE,GACtB,eAAgBQ,EAChB,gBAAiBE,EACjB,kBAAmBU,GACnB,gBAAiBR,GACjB,iBAAkBE,GAClB,2BAA4BY,GAC5B,wBAAyBI,GACzB,2BAA4BE,GAC5B,cAAeJ,GACf,UAAWQ,GACX,YAAaF,GACb,SAAUpL,GAAK,SACf,sBAAuBuN,GACvB,GAAIzE,IAAS,KAAO,CAAE,KAAAA,GAAe,CAAA,CAAC,CAC1C,EAEJ,cAAed,EAAQ,OAASA,EAAQA,EAAQ,OAAS,CAAC,EAAE,OAAO,cAAgB,IAAA,EAIjFuG,GAAmB,MAAO3L,EAAkBtF,IAA4B,CAI1E,GAAI,CACA,QAAQ,IAAI,qBAAqB,EACjC,MAAMgJ,EAAUzE,EAAS,MAAMI,EAASJ,CAAM,EAAI,OAC5CuE,EAASvE,GAAQ,iBAAA,GAAoB,UAAY,eAEjD2M,EADgB3M,GAAQ,iBAAA,GACE,SAC1B4M,EAAiB5G,GAAA,EAEvB,MAAMtL,GAAqB,CACvB,OAAA6J,EACA,SAAAoI,EACA,eAAAC,EACA,SAAU7L,EACV,OAAAtF,EACA,aAAcoK,GAAqB,MAAA,EACpCpB,CAAO,EAEV,QAAQ,IAAI,mBAAmB,CACnC,OAAS1J,EAAO,CACZ,QAAQ,MAAM,wBAAyBA,CAAK,CAChD,CACJ,EAGUF,EAAW,MAAMP,GAAQC,GAASC,GAAS,IAAI,EAErD,GAAI,CAACK,EAAS,GAAI,CACd,MAAMgS,EAAY,MAAMhS,EAAS,KAAA,EAC3BE,EAAQ,IAAI,MACjBA,MAAAA,EAAc,KAAO8R,EAAU,OAAS,gBACnC9R,CACV,CACA,GAAI,CAACF,EAAS,KACV,MAAM,IAAI,MAAM,uBAAuB,EAG/C,IAAIiS,GAIJ,GAAIvE,GAAc,CAEdoB,GAAe,EAAI,EACnB,MAAMoD,EAASlS,EAAS,KAAK,UAAA,EACvBmS,EAAU,IAAI,YACpB,IAAIC,EAAc,GAElB,OAAa,CACT,KAAM,CAAE,MAAAC,EAAO,KAAAC,EAAA,EAAS,MAAMJ,EAAO,KAAA,EACrC,GAAII,GAAM,MAEVF,GAAeD,EAAQ,OAAOE,EAAO,CAAE,OAAQ,GAAM,EACrD,MAAME,EAAaH,EAAY,MAAM;AAAA;AAAA,CAAM,EAE3C,QAAS7S,EAAI,EAAGA,EAAIgT,EAAW,OAAS,EAAGhT,IAAK,CAC5C,MAAMiT,GAAQD,EAAWhT,CAAC,EAC1B,GAAIiT,GAAM,WAAW,QAAQ,EAAG,CAC5B,MAAMC,GAAaD,GAAM,UAAU,CAAC,EACpC,GAAI,CACA,MAAME,EAAQ,KAAK,MAAMD,EAAU,EACnClH,EAAWoG,IAAe,CACtB,MAAMgB,GAAa,CAAC,GAAGhB,EAAW,EAC5BiB,EAAaD,GAAWA,GAAW,OAAS,CAAC,EAAE,OACrD,OAAID,EAAM,UACNE,EAAW,QAAQ,SAAWF,EAAM,SAEpCA,EAAM,UACNE,EAAW,QAAU,CAAE,GAAGA,EAAW,QAAS,GAAGF,EAAM,OAAA,GAEvDA,EAAM,gBACNE,EAAW,cAAgB,CAAE,GAAIA,EAAW,eAAiB,GAAK,GAAGF,EAAM,aAAA,GAExEC,EACX,CAAC,CACL,OAAS9I,EAAG,CACR,QAAQ,MAAM,+BAAgC4I,GAAY5I,CAAC,CAC/D,CACJ,CACJ,CACAuI,EAAcG,EAAWA,EAAW,OAAS,CAAC,CAClD,CACAN,GAAe,CAAE,GAAGR,CAAA,CACxB,KAAO,CAIH,MAAMoB,EAAiB,MAAM7S,EAAS,KAAA,EACtC,GAAI6S,EAAe,MACf,MAAM,IAAI,MAAMA,EAAe,KAAK,EASxC,GANAtH,EAAWoG,GAAe,CACtB,MAAMgB,EAAa,CAAC,GAAGhB,CAAW,EAClC,OAAAgB,EAAWA,EAAW,OAAS,CAAC,EAAE,OAASE,EACpCF,CACX,CAAC,EACDV,GAAcY,EACV,OAAOA,EAAe,eAAkB,UAAYA,EAAe,gBAAkB,GAAI,CAC7F,MAAMlT,EAAQwF,EAAS,MAAMI,EAASJ,CAAM,EAAI,OAC1C2N,EAAoBxH,EAAQ,IAAIsG,GAAQ,CAACA,EAAK,SAAUA,EAAK,MAAM,CAA8B,CAEvG,CAGJ,CAGA,MAAMC,GAAiB3L,EAAU+L,EAAW,CAChD,OAASpI,EAAQ,CACTA,EAAE,OAAS,cACXyH,GAAgB,CACZ,MAAO,YAAA,CACV,EACDF,GAAgB,EAAI,EACpB7F,EAAWoG,IAAe,CACtB,MAAMgB,EAAa,CAAC,GAAGhB,EAAW,EAClC,OAAAgB,EAAWA,EAAW,OAAS,CAAC,EAAE,OAAO,QAAQ,QAAU,aACpDA,CAAW,CAAC,IAEvB,QAAQ,MAAM,cAAe9I,CAAC,EAE9BjB,GAASiB,CAAC,EAEV0B,EAAWoG,IAAe,CACtB,MAAMgB,EAAa,CAAC,GAAGhB,EAAW,EAClC,OAAAgB,EAAWA,EAAW,OAAS,CAAC,EAAE,OAAO,QAAQ,QAAU,eAAiB9I,EAAE,QACvE8I,CACX,CAAC,EAET,QAAA,CAEIhK,GAAa,EAAK,EAClBmG,GAAe,EAAK,CACxB,CACJ,EACMiE,GAAY,IAAM,CACpB3H,EAAgB,QAAU,GAC1BlL,IAAS0I,GAAS,MAAS,EAC3BoG,GAAkB,MAAS,EAE3BzD,EAAW,CAAA,CAAE,EACb6D,GAAc,CAAA,CAAE,EAEhBzG,GAAa,EAAK,EAClBmG,GAAe,EAAK,EACpB/G,GAAS,GAAG,CAChB,EAEAiL,EAAAA,gBAAgB,IAAM,CAIlB,GAHA,QAAQ,IAAI,uDAAwDlI,CAAQ,EAGxEA,GAAYQ,EAAQ,OAAS,EAAG,CAChC,MAAM2H,EAAa3H,EAAQ,KAAKsG,GAAQA,EAAK,KAAO9G,CAAQ,EACxDmI,GACA,QAAQ,IAAI,gCAAiCA,EAAW,EAAE,EAC1DtH,EAAcsH,EAAW,EAAE,GAE3B,QAAQ,IAAI,+BAA+B,CAEnD,CACJ,EAAG,CAACnI,CAAQ,CAAC,EAGbkI,EAAAA,gBAAgB,IAAM,CAClB,GAAItH,EAAY,CACZ,MAAMwH,EAAU,SAAS,eAAe,WAAWxH,CAAU,EAAE,EAC3DwH,GACAA,EAAQ,eAAe,CAAE,SAAU,OAAQ,MAAO,QAAS,EAE/DvH,EAAc,IAAI,CACtB,CACJ,EAAG,CAACL,EAASI,CAAU,CAAC,EAqBxB,KAAM,CAAE,EAAAvJ,GAAG,KAAAmB,EAAA,EAASlB,EAAA,EAGpB,OACIS,EAAAA,KAAC,MAAA,CAAI,UAAWE,EAAO,UAEnB,SAAA,CAAA1B,EAAAA,IAAC8R,IACG,SAAA9R,MAAC,QAAA,CAAO,SAAAc,GAAE,WAAW,EAAE,CAAA,CAC3B,EACAU,EAAAA,KAAC,MAAA,CAAI,UAAWE,EAAO,uBACnB,SAAA,CAAA1B,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,iBAAA,CAIvB,QACC,MAAA,CAAI,UAAWA,EAAO,kBACnB,eAAC2E,GAAA,CAAgB,UAAW3E,EAAO,cAAe,QAASgQ,GAAW,SAAU,CAAC3H,EAAgB,SAAW1C,GAAW,CAAA,CAG3H,CAAA,EACJ,QACC0K,GAAA,EAAW,QACX,MAAA,CAAI,UAAWrQ,EAAO,SAAU,MAAO,CAAE,WAAY+I,EAAqB,QAAU,KACjF,SAAAjJ,OAAC,MAAA,CAAI,UAAWE,EAAO,cAClB,SAAA,CAACqI,EAAgB,QAWdvI,EAAAA,KAAC,MAAA,CAAI,UAAWE,EAAO,kBAClB,SAAA,CAAAuI,EAAQ,IAAI,CAACsG,EAAM1Q,IAAU,CAC1B,MAAMmS,EAAenS,IAAUoK,EAAQ,OAAS,EAEhD,cACK,MAAA,CACG,SAAA,CAAAjK,MAACkG,IAAgB,QAASqK,EAAK,SAAU,GAAIA,EAAK,GAAI,QACrD,MAAA,CAAI,UAAW7O,EAAO,eAElB,YAAgB7C,GACbmB,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,uBACnB,SAAA1B,EAAAA,IAACqC,GAAA,CAAY,MAAOxD,GAAM,SAAA,EAAY,QAAS,IAAMsR,GAAepG,EAAgB,OAAO,CAAA,CAAG,EAClG,EACAiI,GAAgB3K,GAChBrH,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,uBACnB,SAAA1B,EAAAA,IAACgC,GAAA,CAAA,CAAc,EACnB,EAEAhC,EAAAA,IAACG,GAAA,CACG,YAAaX,IAAewS,EAE5B,OAAQzB,EAAK,OACb,MAAA1Q,EACA,aAAAO,EAAA,EAHKP,CAAA,CAYT,CAER,CAAA,CAAA,EA7BM0Q,EAAK,EA8Bf,CAER,CAAC,EACDvQ,EAAAA,IAAC,MAAA,CAAI,IAAK4E,EAAA,CAAsB,CAAA,EACpC,EAjDApD,OAAC,MAAA,CAAI,UAAWE,EAAO,eACnB,SAAA,CAAA1B,EAAAA,IAAC,MAAA,CAAI,IAAKnC,GAAS,IAAI,WAAW,MAAM,MAAM,OAAO,KAAA,CAAM,QAE1D,KAAA,CAAG,UAAW6D,EAAO,oBAAsB,SAAAZ,GAAE,qBAAqB,CAAA,CAAE,CAAA,CAAA,CAKzE,EA2CJd,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,UACnB,SAAA1B,EAAAA,IAACsE,GAAA,CACG,YAAW,GACX,YAAaxD,GAAE,6BAA6B,EAC5C,SAAUuG,GACV,OAAQxC,GAAYsL,GAAetL,CAAQ,EAC3C,gBAAAiK,GACA,qBAAAlK,EAAA,CAAA,CACJ,CACJ,CAAA,CAAA,CACJ,CAAA,CACJ,EAECkL,IACG9P,EAAAA,IAACmJ,GAAA,CACD,QAAS2G,GACT,MAAOE,GAAa,MACpB,KAAME,EAAA,CAAA,CACN,EAER,CAGR,4iBC9fa+B,GAAc,IAAM,CAC7B,KAAM,CAAE,SAAApC,CAAA,EAAa/H,EAAA,EACf,CAAE,SAAA/C,EAAU,YAAAmN,GAAgBlN,EAAAA,WAAWvC,CAAY,EACnD4B,EAAgBwL,EAAS,iBAAA,EACzB,CAACsC,EAAUC,CAAW,EAAIhR,EAAAA,SAAS,EAAE,EACrC,CAAE,EAAAN,CAAA,EAAMC,EAAA,EAEdoE,EAAAA,UAAU,IAAM,EACU,SAAY,CAC9BiN,EAAa,MAAMhO,GAAYyL,CAAQ,GAAM,EAAE,CACnD,GAEA,CACJ,EAAG,CAAA,CAAE,EAEL,MAAMwC,EAAmB,IAAM,CAM3BxC,EACK,WAAW,CACR,GAAGxM,GACH,YAAaE,GAAA,CAAe,CAC/B,EACA,MAAM1E,GAAS,QAAQ,IAAIA,CAAK,CAAC,EACjC,KAAK,SAAY,CACdqT,EAAY,MAAMrO,GAAcgM,CAAQ,CAAC,EACzCuC,EAAa,MAAMhO,GAAYyL,CAAQ,GAAM,EAAE,CACnD,CAAC,CACT,EACMyC,EAAoB,IAAM,CACxBjO,EACAwL,EACK,YAAY,CACT,sBAAuB,IACvB,QAASA,EAAS,iBAAA,CAAiB,CACtC,EACA,MAAMhR,GAAS,QAAQ,IAAIA,CAAK,CAAC,EACjC,KAAK,SAAY,CACdqT,EAAY,MAAMrO,GAAcgM,CAAQ,CAAC,EACzCuC,EAAa,MAAMhO,GAAYyL,CAAQ,GAAM,EAAE,CACnD,CAAC,EAELjM,GAAA,CAER,EACA,OACI5D,EAAAA,IAACuS,GAAA,CACG,KAAMxN,EAAW,GAAGjE,EAAE,QAAQ,CAAC;AAAA,EAAKqR,CAAQ,GAAK,GAAGrR,EAAE,OAAO,CAAC,GAC9D,UAAWY,GAAO,YAClB,QAASqD,EAAWuN,EAAoBD,CAAA,CAAA,CAGpD,ECvDMG,GAAS,IAAM,CACjB,KAAM,CAAE,CAAA,EAAMzR,EAAA,EACR,CAAC0R,EAAUC,CAAW,EAAItR,EAAAA,SAAS,EAAK,EACxCuR,EAAqC3I,EAAAA,OAAO,IAAI,EAEhD4I,EAAa,IAAM,CACrBF,EAAY,CAACD,CAAQ,CACzB,EAEMI,EAAsBxB,GAAsB,CAC1CsB,EAAQ,SAAW,CAACA,EAAQ,QAAQ,SAAStB,EAAM,MAAc,GACjEqB,EAAY,EAAK,CAEzB,EAEAvN,OAAAA,EAAAA,UAAU,KACFsN,EACA,SAAS,iBAAiB,YAAaI,CAAkB,EAEzD,SAAS,oBAAoB,YAAaA,CAAkB,EAEzD,IAAM,CACT,SAAS,oBAAoB,YAAaA,CAAkB,CAChE,GACD,CAACJ,CAAQ,CAAC,EAGTjR,EAAAA,KAAC,MAAA,CAAI,UAAWE,EAAO,OACnB,SAAA,CAAA1B,EAAAA,IAAC,SAAA,CAAO,UAAW0B,EAAO,OAAQ,KAAM,SACpC,SAAAF,EAAAA,KAAC,MAAA,CAAI,UAAWE,EAAO,gBAAiB,IAAKiR,EACzC,SAAA,CAAA3S,MAAC8S,GAAA,CAAK,GAAG,IAAI,UAAWpR,EAAO,qBAC3B,SAAA1B,EAAAA,IAAC,KAAA,CAAG,UAAW0B,EAAO,YAAc,SAAA,EAAE,aAAa,EAAE,EACzD,EACA1B,MAAC,MAAA,CACG,SAAAA,EAAAA,IAAC,KAAA,CAAG,UAAW,GAAG0B,EAAO,aAAa,IAAI+Q,EAAW/Q,EAAO,KAAO,EAAE,GACjE,eAAC,KAAA,CACG,SAAA1B,EAAAA,IAAC+S,GAAA,CACG,GAAG,IACH,UAAW,CAAC,CAAE,SAAAC,CAAA,IAAgBA,EAAWtR,EAAO,wBAA0BA,EAAO,kBACjF,QAAS,IAAMgR,EAAY,EAAK,EAE/B,WAAE,MAAM,CAAA,CAAA,CACb,CACJ,EAUJ,EACJ,EACAlR,EAAAA,KAAC,MAAA,CAAI,UAAWE,EAAO,mBAClB,SAAA,CAAAuB,SAAagP,GAAA,EAAY,EAC1BjS,EAAAA,IAAC2B,GAAA,CACG,UAAW,CAAE,SAAU,iBAAA,EACvB,UAAWD,EAAO,WAClB,QAASkR,EACT,UAAW,EAAE,mBAAmB,CAAA,CAAA,CACpC,CAAA,CACJ,CAAA,CAAA,CACJ,CAAA,CACJ,QAECK,GAAA,CAAA,CAAO,CAAA,EACZ,CAER,EClCMC,GAAgB,IAAM,CACxB,KAAM,CAACnO,EAAUmN,CAAW,EAAI9Q,EAAAA,SAAS,EAAK,EAC9C,OAAI6B,GAGI,CAACe,EAAa,iBAAA,GAAsBA,EAAa,eAAA,EAAiB,OAAS,GAE3EA,EAAa,iBAAiBA,EAAa,kBAAkB,EAGjEA,EAAa,iBAAiBqN,GAAS,CACnC,GAAIA,EAAM,YAAc8B,GAAU,eAAiB9B,EAAM,QAAS,CAC9D,MAAM+B,EAAU/B,EAAM,QACtBrN,EAAa,iBAAiBoP,CAAO,CACzC,CACJ,CAAC,EACDjO,EAAAA,UAAU,IAAM,EACU,SAAY,CAC9B+M,EAAY,MAAMrO,GAAcG,CAAY,CAAC,CACjD,GACA,CACJ,EAAG,CAAA,CAAE,EAEDhE,EAAAA,IAACqT,GAAA,CAAa,SAAUrP,EACpB,SAAAhE,EAAAA,IAACyC,EAAa,SAAb,CACG,MAAO,CACH,SAAAsC,EACA,YAAAmN,CAAA,EAGJ,eAACM,GAAA,CAAA,CAAO,CAAA,CAAA,EAEhB,GAIAxS,EAAAA,IAACyC,EAAa,SAAb,CACG,MAAO,CACH,SAAAsC,EACA,YAAAmN,CAAA,EAGJ,eAACM,GAAA,CAAA,CAAO,CAAA,CAAA,CAIxB,45gEC7Eac,GAAqE,CAC9E,GAAI,CACA,KAAM,QACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,UACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,UACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,WACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,MACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,aACN,OAAQ,OAAA,EAEZ,KAAM,CACF,KAAM,uBACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,SACN,OAAQ,OAAA,EAEZ,GAAI,CACA,KAAM,WACN,OAAQ,OAAA,CAEhB,EAEAC,GACK,IAAIC,EAAO,EACX,IAAIC,EAAgB,EACpB,IAAIC,EAAgB,EAGpB,KAAK,CACF,UAAW,CACP,GAAI,CAAE,YAAaC,EAAA,EACnB,GAAI,CAAE,YAAaC,EAAA,EACnB,GAAI,CAAE,YAAaC,EAAA,EACnB,GAAI,CAAE,YAAaC,EAAA,EACnB,GAAI,CAAE,YAAaC,EAAA,EACnB,GAAI,CAAE,YAAaC,EAAA,EACnB,KAAM,CAAE,YAAaC,EAAA,EACrB,GAAI,CAAE,YAAaC,EAAA,EACnB,GAAI,CAAE,YAAaC,EAAA,CAAc,EAErC,YAAa,KACb,cAAe,OAAO,KAAKb,EAAa,EACxC,MAAO,GACP,cAAe,CACX,YAAa,EAAA,CAErB,CAAC,ECrEE,MAAMc,GAAc,CAAC,CAAE,SAAAnL,KAA8C,CACxE,QAAQ,IAAI,mDAAmD,EAC/D,KAAM,CAAE,SAAA4G,CAAA,EAAa/H,EAAA,EACfuM,EAAkBC,GAAA,EAGlB,CAACC,EAAgBC,CAAiB,EAAIpT,EAAAA,SAAS,EAAK,EACpD,CAAE,SAAA8H,CAAA,EAAaH,GAAA,EACrB5D,OAAAA,EAAAA,UAAU,KACN,QAAQ,IAAI,8CAA8C,EAEtDkP,GAAmB,CAACE,IACpBC,EAAkB,EAAI,GAEU,SAAY,CACxC,GAAI,CAEA,MAAMnQ,EAAgBwL,EAAS,iBAAA,EAC/B,GAAI,CAACxL,EACD,MAAM,IAAI,MAAM,yBAAyB,EAE7C,MAAMoQ,EAAoB,MAAM5E,EAAS,mBAAmB,CACxD,QAASxL,EACT,OAAO,CAAC,0DAAkC,CAAA,CAC7C,EACD6E,EAASuL,EAAkB,WAAW,EACtC,QAAQ,IAAI,aAAcA,EAAkB,WAAW,EACvD,QAAQ,IAAI,8BAA8B,CAE9C,OAAS5V,EAAO,CAIZ,GAHA,QAAQ,MAAM,uCAAwCA,CAAK,EAC3D,QAAQ,MAAM,yBAA0BA,CAAK,EAEzCA,aAAiB6V,GAA8B,CAC/C,MAAMC,EAAgB,MAAM9E,EAAS,kBAAkB,CACvD,OAAQ,CAAC,0DAAkC,CAAA,CAC1C,EACD3G,EAASyL,EAAc,WAAW,CACtC,KACI,OAAM9V,CAEd,CACJ,GAEA,GAGG,IAAM,CAEb,QAAQ,IAAI,kDAAkD,CAClE,GACG,CAACwV,EAAiBxE,EAAU0E,EAAgBrL,CAAQ,CAAC,oBAG9C,SAAAD,EAAS,CACvB,ECxDM2L,GAAc,IAAM,CACtB,KAAM,CAAE,GAAAxO,CAAA,EAAOyO,GAAA,EACT,CAACC,CAAY,EAAIC,GAAA,EACjB,CAACvL,EAAgBwL,CAAiB,EAAI5T,EAAAA,SAAoC,IAAI,EAC9E,CAAC6T,EAASC,CAAU,EAAI9T,EAAAA,SAAS,EAAI,EACrC,CAAE,SAAAyG,CAAA,EAAaC,EAAA,EACf4B,EAAeoL,EAAa,IAAI,cAAc,EAqCpD,OAnCA3P,EAAAA,UAAU,IAAM,EACY,SAAY,CAChC,GAAI,CAACiB,GAAMyB,EAAS,SAAW,EAAG,CAC9BqN,EAAW,EAAK,EAChB,MACJ,CAEAA,EAAW,EAAI,EACf,GAAI,CACA,MAAMpR,EAASb,EAAWe,EAAe,OACnC1F,EAAQwF,EAAS,MAAMI,EAASJ,CAAM,EAAI,OAE1CnF,EAAW,MAAM,MAAM,gBAAgByH,CAAE,kBAAkBsD,CAAY,GAAI,CAC7E,QAAS,CAAE,cAAiB,UAAUpL,CAAK,EAAA,CAAG,CACjD,EAED,GAAI,CAACK,EAAS,GAAI,CACd,MAAMgS,EAAY,MAAMhS,EAAS,KAAA,EACjC,MAAM,IAAI,MAAM,gBAAgBA,EAAS,MAAM,KAAKgS,CAAS,EAAE,CACnE,CAEA,MAAMlS,EAA2B,MAAME,EAAS,KAAA,EAChDqW,EAAkBvW,EAAK,SAAS,CAEpC,OAAS+J,EAAG,CACR,QAAQ,MAAM,4BAA6BA,CAAC,EAC5CwM,EAAkB,IAAI,CAC1B,QAAA,CACIE,EAAW,EAAK,CACpB,CACJ,GAEA,CACJ,EAAG,CAAC9O,EAAIyB,CAAQ,CAAC,EAEboN,EAEAjV,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,mBAAmB,EACtC,SAAA1B,EAAAA,IAAC,MAAA,CAAI,UAAW0B,EAAO,OAAA,CAAS,CAAA,CACpC,EAIC8H,EAKExJ,EAAAA,IAACuJ,GAAA,CAAK,eAAAC,EAAgC,SAAUpD,EAAI,aAAAsD,EAA4B,EAL3D1J,EAAAA,IAAC,OAAI,SAAA,eAAY,CAMjD,EC5CMmV,GAASC,GAAiB,CAC9B,CACE,KAAM,IACN,QACEpV,EAAAA,IAACqV,GAAA,CACC,gBAAiBC,GAAgB,SACjC,sBAAuBjS,GAEvB,eAAC6P,GAAA,CAAA,CAAc,CAAA,CAAA,EAGnB,SAAU,CACR,CACE,MAAO,GACP,QACElT,EAAAA,IAACoU,GAAA,CACC,SAAApU,MAACuJ,KAAK,CAAA,CACR,CAAA,EAGJ,CACE,KAAM,WACN,QACEvJ,EAAAA,IAACoU,GAAA,CACC,SAAApU,MAAC4U,KAAY,CAAA,CACf,CAAA,CAEJ,CACF,CAYJ,CAAC,EAID,eAAeW,IAAO,CAElB,MAAMvR,EAAa,WAAA,EAGnBA,EAAa,iBAAkBqN,GAAwB,CACnD,GAAIA,EAAM,YAAc8B,GAAU,eAAiB9B,EAAM,QAAS,CAC9D,MAAMmE,EAAUnE,EAAM,QAClBmE,EAAQ,SACRxR,EAAa,iBAAiBwR,EAAQ,OAAO,CAErD,CACJ,CAAC,EAGD,MAAMxR,EAAa,sBAAA,EAGnByR,GAAA,EACAC,GAAS,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,OAChE1V,EAAAA,IAAC2V,GAAM,WAAN,CACG,eAACtC,GAAA,CAAa,SAAUrP,EACpB,SAAAhE,EAAAA,IAACgJ,GAAA,CACG,SAAAhJ,EAAAA,IAAC4V,IAAgB,KAAMrC,GACnB,SAAAvT,EAAAA,IAAC6V,GAAA,CACG,SAAA7V,EAAAA,IAAC8V,GAAA,CAAe,OAAAX,GAAgB,CAAA,CACpC,CAAA,CACJ,CAAA,CACJ,CAAA,CACJ,CAAA,CACJ,CAAA,CAER,CAGAI,KAAO,MAAM1W,GAAS,CAClB,QAAQ,MAAM,4BAA6BA,CAAK,CACpD,CAAC"}